<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Stashbox</name>
    </assembly>
    <members>
        <member name="T:Stashbox.Attributes.DependencyAttribute">
            <summary>
            Represents an attribute for tracking dependencies.
            </summary>
        </member>
        <member name="P:Stashbox.Attributes.DependencyAttribute.Name">
            <summary>
            The name of the dependency.
            </summary>
        </member>
        <member name="M:Stashbox.Attributes.DependencyAttribute.#ctor(System.Object)">
            <summary>
            Constructs a <see cref="T:Stashbox.Attributes.DependencyAttribute" /></summary>
            <param name="name">The name of the dependency.</param>
        </member>
        <member name="T:Stashbox.Attributes.InjectionMethodAttribute">
            <summary>
            Represents an attribute for tracking injection methods.
            </summary>
        </member>
        <member name="T:Stashbox.Configuration.ContainerConfiguration">
            <summary>
            Represents a container configuration
            </summary>
        </member>
        <member name="P:Stashbox.Configuration.ContainerConfiguration.TrackTransientsForDisposalEnabled">
            <summary>
            If it's set to true the container will track transient objects for disposal.
            </summary>
        </member>
        <member name="P:Stashbox.Configuration.ContainerConfiguration.RegistrationBehavior">
            <summary>
            The actual behavior used when a new service is going to be registered into the container. See the <see cref="T:Stashbox.Configuration.Rules.RegistrationBehavior" /> enum for available options.
            </summary>
        </member>
        <member name="P:Stashbox.Configuration.ContainerConfiguration.DefaultValueInjectionEnabled">
            <summary>
            If it's set to true, the container will inject optional and default values for missing dependencies and primitive types.
            </summary>
        </member>
        <member name="P:Stashbox.Configuration.ContainerConfiguration.UnknownTypeResolutionEnabled">
            <summary>
            If it's set to true the container will try to register the unknown type during the activation.
            </summary>
        </member>
        <member name="P:Stashbox.Configuration.ContainerConfiguration.AutoMemberInjectionEnabled">
            <summary>
            If it's set to true, the container will inject members even without <see cref="T:Stashbox.Attributes.DependencyAttribute" />.
            </summary>
        </member>
        <member name="P:Stashbox.Configuration.ContainerConfiguration.TreatingParameterAndMemberNameAsDependencyNameEnabled">
            <summary>
            If it's set to true, the container will treat the name of a constructor/method parameter or member name as a dependency name used by named resolution.
            </summary>
        </member>
        <member name="P:Stashbox.Configuration.ContainerConfiguration.NamedDependencyResolutionForUnNamedRequestsEnabled">
            <summary>
            If it's set to true, the container will use an unnamed registration when a named one not found for a request with dependency name.
            </summary>
        </member>
        <member name="P:Stashbox.Configuration.ContainerConfiguration.ReBuildSingletonsInChildContainerEnabled">
            <summary>
            If it's set to true, in a child-parent container case singletons will be rebuilt with the dependencies overridden in the child, not affecting the already built instance in the parent.
            </summary>
        </member>
        <member name="P:Stashbox.Configuration.ContainerConfiguration.AutoMemberInjectionRule">
            <summary>
            The member injection rule.
            </summary>
        </member>
        <member name="P:Stashbox.Configuration.ContainerConfiguration.ConstructorSelectionRule">
            <summary>
            The constructor selection rule.
            </summary>
        </member>
        <member name="P:Stashbox.Configuration.ContainerConfiguration.UnknownTypeConfigurator">
            <summary>
            Represents the configuration which will be invoked when an unknown type being registered.
            </summary>
        </member>
        <member name="P:Stashbox.Configuration.ContainerConfiguration.ConfigurationChangedEvent">
            <summary>
            The action which will be invoked when the container configuration changes.
            </summary>
        </member>
        <member name="P:Stashbox.Configuration.ContainerConfiguration.AutoMemberInjectionFilter">
            <summary>
            A filter delegate used to determine which members should be auto injected and which are not.
            </summary>
        </member>
        <member name="P:Stashbox.Configuration.ContainerConfiguration.DefaultLifetime">
            <summary>
            The default lifetime, used when a service isn't configured with a lifetime.
            </summary>
        </member>
        <member name="P:Stashbox.Configuration.ContainerConfiguration.LifetimeValidationEnabled">
            <summary>
            When it's true, the container validates the lifetime configuration of the resolution
            graph via the <see cref="P:Stashbox.Lifetime.LifetimeDescriptor.LifeSpan" /> value,
            and checks that scoped services are not resolved from the root scope.
            </summary>
        </member>
        <member name="P:Stashbox.Configuration.ContainerConfiguration.ExternalExpressionCompiler">
            <summary>
            A delegate to use external expression compilers.
            </summary>
        </member>
        <member name="T:Stashbox.Configuration.ContainerConfigurator">
            <summary>
            Represents a container configurator.
            </summary>
        </member>
        <member name="P:Stashbox.Configuration.ContainerConfigurator.ContainerConfiguration">
            <summary>
            The container configuration.
            </summary>
        </member>
        <member name="M:Stashbox.Configuration.ContainerConfigurator.WithDisposableTransientTracking(System.Boolean)">
            <summary>
            Enables or disables the tracking of disposable transient objects.
            </summary>
            <param name="enabled">True when the feature should be enabled, otherwise false.</param>
            <returns>The container configurator.</returns>
        </member>
        <member name="M:Stashbox.Configuration.ContainerConfigurator.WithRegistrationBehavior(Stashbox.Configuration.Rules.RegistrationBehavior)">
            <summary>
            Sets the actual behavior used when a new service is registered into the container. These options do not affect named registrations. See the <see cref="T:Stashbox.Configuration.Rules.RegistrationBehavior" /> enum for available options.
            </summary>
            <param name="registrationBehavior">The actual registration behavior.</param>
            <returns>The container configurator.</returns>
        </member>
        <member name="M:Stashbox.Configuration.ContainerConfigurator.WithDefaultValueInjection(System.Boolean)">
            <summary>
            Enables or disables the default value injection.
            </summary>
            <param name="enabled">True when the feature should be enabled, otherwise false.</param>
            <returns>The container configurator.</returns>
        </member>
        <member name="M:Stashbox.Configuration.ContainerConfigurator.WithUnknownTypeResolution(System.Action{Stashbox.Registration.Fluent.UnknownRegistrationConfigurator},System.Boolean)">
            <summary>
            Enables or disables the unknown type resolution.
            </summary>
            <param name="configurator">An optional configuration action used during the registration of the unknown type.</param>
            <param name="enabled">True when the feature should be enabled, otherwise false.</param>
            <returns>The container configurator.</returns>
        </member>
        <member name="M:Stashbox.Configuration.ContainerConfigurator.WithAutoMemberInjection(Stashbox.Configuration.Rules.AutoMemberInjectionRules,System.Func{System.Reflection.MemberInfo,System.Boolean},System.Boolean)">
            <summary>
            Enables or disables the auto member-injection without annotation.
            </summary>
            <param name="rule">The rule used to determine what kind of members (properties / fields) should be auto injected.</param>
            <param name="filter">An optional filter predicate used to select which properties or fields of a type should be auto injected.</param>
            <param name="enabled">True when the feature should be enabled, otherwise false.</param>
            <returns>The container configurator.</returns>
        </member>
        <member name="M:Stashbox.Configuration.ContainerConfigurator.WithConstructorSelectionRule(System.Func{System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo},System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo}})">
            <summary>
            Sets the constructor selection rule used to determine which constructor should the container use for instantiation
            </summary>
            <returns>The container configurator.</returns>
        </member>
        <member name="M:Stashbox.Configuration.ContainerConfigurator.OnContainerConfigurationChanged(System.Action{Stashbox.Configuration.ContainerConfiguration})">
            <summary>
            Sets a callback delegate to call when the container configuration changes.
            </summary>
            <returns>The container configurator.</returns>
        </member>
        <member name="M:Stashbox.Configuration.ContainerConfigurator.TreatParameterAndMemberNameAsDependencyName(System.Boolean)">
            <summary>
            Enables or disables conventional resolution, which means the container treats the constructor/method parameter or member names as dependency names used by named resolution.
            </summary>
            <param name="enabled">True when the feature should be enabled, otherwise false.</param>
            <returns>The container configurator.</returns>
        </member>
        <member name="M:Stashbox.Configuration.ContainerConfigurator.WithNamedDependencyResolutionForUnNamedRequests(System.Boolean)">
            <summary>
            Enables or disables the selection of named registrations when the resolution request is un-named but with the same type.
            </summary>
            <param name="enabled">True when the feature should be enabled, otherwise false.</param>
            <returns>The container configurator.</returns>
        </member>
        <member name="M:Stashbox.Configuration.ContainerConfigurator.WithDefaultLifetime(Stashbox.Lifetime.LifetimeDescriptor)">
            <summary>
            Sets the default lifetime used when a service doesn't have a configured one.
            </summary>
            <param name="lifetime">The default lifetime.</param>
            <returns>The container configurator.</returns>
        </member>
        <member name="M:Stashbox.Configuration.ContainerConfigurator.WithLifetimeValidation(System.Boolean)">
            <summary>
            Enables or disables the life-span and root resolution validation on the dependency tree.
            </summary>
            <param name="enabled">True when the feature should be enabled, otherwise false.</param>
            <returns>The container configurator.</returns>
        </member>
        <member name="M:Stashbox.Configuration.ContainerConfigurator.WithReBuildSingletonsInChildContainer(System.Boolean)">
            <summary>
            Enables or disables the re-building of singletons in child containers. It allows the child containers to effectively override singleton dependencies in the parent. This feature is not affecting the already built singleton instances in the parent.
            </summary>
            <param name="enabled">True when the feature should be enabled, otherwise false.</param>
            <returns>The container configurator.</returns>
        </member>
        <member name="M:Stashbox.Configuration.ContainerConfigurator.WithExpressionCompiler(System.Func{System.Linq.Expressions.LambdaExpression,System.Delegate})">
            <summary>
            Sets an external expression tree compiler used by the container to compile the generated expressions.
            </summary>
            <param name="compilerDelegate">The compiler delegate used to compile expression trees.</param>
            <returns>The container configurator.</returns>
        </member>
        <member name="T:Stashbox.Configuration.Rules">
            <summary>
            Represents the predefined configuration rules of the <see cref="T:Stashbox.StashboxContainer" />.
            </summary>
        </member>
        <member name="T:Stashbox.Configuration.Rules.ServiceRegistrationFilters">
            <summary>
            Represents the rules related to registration filters used in <see cref="M:Stashbox.IDependencyCollectionRegistrator.RegisterTypes(System.Collections.Generic.IEnumerable{System.Type},System.Func{System.Type,System.Boolean},System.Func{System.Type,System.Type,System.Boolean},System.Boolean,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})" />.
            </summary>
        </member>
        <member name="F:Stashbox.Configuration.Rules.ServiceRegistrationFilters.Interfaces">
            <summary>
            Includes only interface types.
            </summary>
        </member>
        <member name="F:Stashbox.Configuration.Rules.ServiceRegistrationFilters.AbstractClasses">
            <summary>
            Includes only abstract types.
            </summary>
        </member>
        <member name="T:Stashbox.Configuration.Rules.RegistrationBehavior">
            <summary>
            Represents the actual behavior used when a new service is going to be registered into the container. These options does not affect named registrations.
            </summary>
        </member>
        <member name="F:Stashbox.Configuration.Rules.RegistrationBehavior.SkipDuplications">
            <summary>
            The container will skip new registrations when the given implementation type is already registered.
            </summary>
        </member>
        <member name="F:Stashbox.Configuration.Rules.RegistrationBehavior.ThrowException">
            <summary>
            The container will throw a <see cref="T:Stashbox.Exceptions.ServiceAlreadyRegisteredException" /> when the given implementation type is already registered.
            </summary>
        </member>
        <member name="F:Stashbox.Configuration.Rules.RegistrationBehavior.ReplaceExisting">
            <summary>
            The container will replace the already registered service with the given one when they have the same implementation type.
            </summary>
        </member>
        <member name="F:Stashbox.Configuration.Rules.RegistrationBehavior.PreserveDuplications">
            <summary>
            The container will keep registering the new services with the same implementation type.
            </summary>
        </member>
        <member name="T:Stashbox.Configuration.Rules.AutoMemberInjectionRules">
            <summary>
            Represents the rules for auto injecting members.
            </summary>
        </member>
        <member name="F:Stashbox.Configuration.Rules.AutoMemberInjectionRules.None">
            <summary>
            None will be injected.
            </summary>
        </member>
        <member name="F:Stashbox.Configuration.Rules.AutoMemberInjectionRules.PropertiesWithPublicSetter">
            <summary>
            With this flag the container will perform auto injection on properties which has a public setter.
            </summary>
        </member>
        <member name="F:Stashbox.Configuration.Rules.AutoMemberInjectionRules.PropertiesWithLimitedAccess">
            <summary>
            With this flag the container will perform auto injection on properties which has a non public setter as well.
            </summary>
        </member>
        <member name="F:Stashbox.Configuration.Rules.AutoMemberInjectionRules.PrivateFields">
            <summary>
            With this flag the container will perform auto injection on private fields too.
            </summary>
        </member>
        <member name="T:Stashbox.Configuration.Rules.ConstructorSelection">
            <summary>
            Represents the constructor selection rules.
            </summary>
        </member>
        <member name="F:Stashbox.Configuration.Rules.ConstructorSelection.PreferMostParameters">
            <summary>
            Prefers the constructor which has the longest parameter list.
            </summary>
        </member>
        <member name="F:Stashbox.Configuration.Rules.ConstructorSelection.PreferLeastParameters">
            <summary>
            Prefers the constructor which has the shortest parameter list.
            </summary>
        </member>
        <member name="T:Stashbox.Configuration.Rules.ExpressionCompilers">
            <summary>
            Pre-defined expression compiler delegates.
            </summary>
        </member>
        <member name="F:Stashbox.Configuration.Rules.ExpressionCompilers.MicrosoftExpressionCompiler">
            <summary>
            The standard Microsoft expression compiler.
            </summary>
        </member>
        <member name="F:Stashbox.Configuration.Rules.ExpressionCompilers.StashboxExpressionCompiler">
            <summary>
            The built-in Stashbox expression compiler.
            </summary>
        </member>
        <member name="T:Stashbox.Exceptions.CircularDependencyException">
            <summary>
            Represents the exception the container throws when a circular dependency is found.
            </summary>
        </member>
        <member name="P:Stashbox.Exceptions.CircularDependencyException.Type">
            <summary>
            The type the container is currently resolving.
            </summary>
        </member>
        <member name="M:Stashbox.Exceptions.CircularDependencyException.#ctor(System.Type,System.Exception)">
            <summary>
            Constructs a <see cref="T:Stashbox.Exceptions.CircularDependencyException" />.
            </summary>
            <param name="type">The type of the service type.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Stashbox.Exceptions.CircularDependencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <member name="T:Stashbox.Exceptions.CompositionRootNotFoundException">
            <summary>
            Occurs when composing requested but no <see cref="T:Stashbox.ICompositionRoot" /> is present in the given assembly.
            </summary>
        </member>
        <member name="M:Stashbox.Exceptions.CompositionRootNotFoundException.#ctor(System.Reflection.Assembly,System.Exception)">
            <summary>
            Constructs a <see cref="T:Stashbox.Exceptions.CompositionRootNotFoundException" />.
            </summary>
            <param name="assembly">The scanned assembly.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Stashbox.Exceptions.CompositionRootNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <member name="T:Stashbox.Exceptions.ConstructorNotFoundException">
            <summary>
            Represents a constructor not found exception.
            </summary>
        </member>
        <member name="M:Stashbox.Exceptions.ConstructorNotFoundException.#ctor(System.Type,System.Type[],System.Exception)">
            <summary>
            Constructs a <see cref="T:Stashbox.Exceptions.ConstructorNotFoundException" />.
            </summary>
            <param name="type">The type on the constructor was not found.</param>
            <param name="argumentTypes">The arguments.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Stashbox.Exceptions.ConstructorNotFoundException.#ctor(System.Type,System.Exception)">
            <summary>
            Constructs a <see cref="T:Stashbox.Exceptions.ConstructorNotFoundException" />.
            </summary>
            <param name="type">The type on the constructor was not found.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Stashbox.Exceptions.ConstructorNotFoundException.#ctor(System.Type,System.Type,System.Exception)">
            <summary>
            Constructs a <see cref="T:Stashbox.Exceptions.ConstructorNotFoundException" />.
            </summary>
            <param name="type">The type on the constructor was not found.</param>
            <param name="argument">The argument type.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Stashbox.Exceptions.ConstructorNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <member name="T:Stashbox.Exceptions.InvalidRegistrationException">
            <summary>
            Represents an exception the container throws when it detects an invalid registration.
            </summary>
        </member>
        <member name="P:Stashbox.Exceptions.InvalidRegistrationException.Type">
            <summary>
            The type the container is trying to register.
            </summary>
        </member>
        <member name="M:Stashbox.Exceptions.InvalidRegistrationException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Constructs a <see cref="T:Stashbox.Exceptions.InvalidRegistrationException" />.
            </summary>
            <param name="type">The type of the service.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Stashbox.Exceptions.InvalidRegistrationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <member name="T:Stashbox.Exceptions.LifetimeValidationFailedException">
            <summary>
            Represents the exception the container throws when the lifetime validation is failed.
            </summary>
        </member>
        <member name="P:Stashbox.Exceptions.LifetimeValidationFailedException.Type">
            <summary>
            The type the container is currently resolving.
            </summary>
        </member>
        <member name="M:Stashbox.Exceptions.LifetimeValidationFailedException.#ctor(System.Type,System.String)">
            <summary>
            Constructs a <see cref="T:Stashbox.Exceptions.LifetimeValidationFailedException" />.
            </summary>
            <param name="type">The type of the service.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Stashbox.Exceptions.LifetimeValidationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <member name="T:Stashbox.Exceptions.ResolutionFailedException">
            <summary>
            Represents the exception the container throws when a service resolution is failed.
            </summary>
        </member>
        <member name="P:Stashbox.Exceptions.ResolutionFailedException.Type">
            <summary>
            The type the container is currently resolving.
            </summary>
        </member>
        <member name="M:Stashbox.Exceptions.ResolutionFailedException.#ctor(System.Type,System.Object,System.String,System.Exception)">
            <summary>
            Constructs a <see cref="T:Stashbox.Exceptions.ResolutionFailedException" />.
            </summary>
            <param name="type">The type of the service.</param>
            <param name="name">The name of the service.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Stashbox.Exceptions.ResolutionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <member name="T:Stashbox.Exceptions.ServiceAlreadyRegisteredException">
            <summary>
            Represents the exception the container throws when a registration process fails due to service duplication.
            Occurs when the container is configured with <see cref="F:Stashbox.Configuration.Rules.RegistrationBehavior.ThrowException" />.
            </summary>
        </member>
        <member name="P:Stashbox.Exceptions.ServiceAlreadyRegisteredException.Type">
            <summary>
            The type the container is trying to register.
            </summary>
        </member>
        <member name="M:Stashbox.Exceptions.ServiceAlreadyRegisteredException.#ctor(System.Type,System.Exception)">
            <summary>
            Constructs a <see cref="T:Stashbox.Exceptions.ServiceAlreadyRegisteredException" />.
            </summary>
            <param name="type">The type of the service.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Stashbox.Exceptions.ServiceAlreadyRegisteredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        <member name="T:Stashbox.ICompositionRoot">
            <summary>
            Represents a composition root used by the <see cref="M:Stashbox.CollectionRegistratorExtensions.ComposeBy``1(Stashbox.IDependencyCollectionRegistrator,System.Object[])" />, <see cref="M:Stashbox.IDependencyCollectionRegistrator.ComposeBy(System.Type,System.Object[])" />, <see cref="M:Stashbox.CollectionRegistratorExtensions.ComposeAssembly(Stashbox.IDependencyCollectionRegistrator,System.Reflection.Assembly,System.Func{System.Type,System.Boolean})" />, and <see cref="M:Stashbox.CollectionRegistratorExtensions.ComposeAssemblies(Stashbox.IDependencyCollectionRegistrator,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Func{System.Type,System.Boolean})" /> methods.
            </summary>
        </member>
        <member name="M:Stashbox.ICompositionRoot.Compose(Stashbox.IStashboxContainer)">
            <summary>
            Composes services through the <see cref="M:Stashbox.CollectionRegistratorExtensions.ComposeBy``1(Stashbox.IDependencyCollectionRegistrator,System.Object[])" />, <see cref="M:Stashbox.IDependencyCollectionRegistrator.ComposeBy(System.Type,System.Object[])" />, <see cref="M:Stashbox.CollectionRegistratorExtensions.ComposeAssembly(Stashbox.IDependencyCollectionRegistrator,System.Reflection.Assembly,System.Func{System.Type,System.Boolean})" />, and <see cref="M:Stashbox.CollectionRegistratorExtensions.ComposeAssemblies(Stashbox.IDependencyCollectionRegistrator,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Func{System.Type,System.Boolean})" /> methods.
            </summary>
            <param name="container">The <see cref="T:Stashbox.IStashboxContainer" />.</param>
        </member>
        <member name="T:Stashbox.IContainerContext">
            <summary>
            Represents the container context.
            </summary>
        </member>
        <member name="P:Stashbox.IContainerContext.RegistrationRepository">
            <summary>
            The service registration repository.
            </summary>
        </member>
        <member name="P:Stashbox.IContainerContext.DecoratorRepository">
            <summary>
            The service decorator registration repository.
            </summary>
        </member>
        <member name="P:Stashbox.IContainerContext.ParentContext">
            <summary>
            The parent container context.
            </summary>
        </member>
        <member name="P:Stashbox.IContainerContext.ResolutionStrategy">
            <summary>
            The resolution strategy.
            </summary>
        </member>
        <member name="P:Stashbox.IContainerContext.RootScope">
            <summary>
            The parent container context.
            </summary>
        </member>
        <member name="P:Stashbox.IContainerContext.ContainerConfiguration">
            <summary>
            The container configuration.
            </summary>
        </member>
        <member name="T:Stashbox.IDecoratorRegistrator">
            <summary>
            Represents a decorator registrator.
            </summary>
        </member>
        <member name="M:Stashbox.IDecoratorRegistrator.RegisterDecorator(System.Type,System.Type,System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator})">
            <summary>
            Registers a decorator service into the container.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="typeTo">The implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDecoratorRegistrator.RegisterDecorator``2(System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator{``0,``1}})">
            <summary>
            Registers a decorator service into the container.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDecoratorRegistrator.RegisterDecorator(System.Type,System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator})">
            <summary>
            Registers a decorator service into the container. 
            This function configures the registration with the <see cref="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.AsImplementedTypes" /> option.
            </summary>
            <param name="typeTo">The implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDecoratorRegistrator.RegisterDecorator``1(System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator{``0,``0}})">
            <summary>
            Registers a decorator service into the container. 
            This function configures the registration with the <see cref="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.AsImplementedTypes" /> option.
            </summary>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDecoratorRegistrator.RegisterDecorator``1(System.Type,System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator{``0,``0}})">
            <summary>
            Registers a decorator service into the container.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <param name="typeTo">The implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="T:Stashbox.IDependencyCollectionRegistrator">
            <summary>
            Represents a dependency collection registrator.
            </summary>
        </member>
        <member name="M:Stashbox.IDependencyCollectionRegistrator.RegisterTypesAs(System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Func{System.Type,System.Boolean},System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers a collection of types mapped to a service type.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="types">Types to register.</param>
            <param name="selector">The type selector. Used to filter which types should be excluded/included in the registration process.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyCollectionRegistrator.RegisterTypes(System.Collections.Generic.IEnumerable{System.Type},System.Func{System.Type,System.Boolean},System.Func{System.Type,System.Type,System.Boolean},System.Boolean,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers a collection of types into the container.
            </summary>
            <param name="types">Types to register.</param>
            <param name="selector">The type selector. Used to filter which types should be excluded/included in the registration process.</param>
            <param name="serviceTypeSelector">The service type selector. Used to filter which interface or base types the implementation should be mapped to.</param>
            <param name="registerSelf">If it's true, the types will be registered to their own type too.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyCollectionRegistrator.ComposeBy(System.Type,System.Object[])">
            <summary>
            Composes services by calling the <see cref="M:Stashbox.ICompositionRoot.Compose(Stashbox.IStashboxContainer)" /> method of the given root.
            </summary>
            <param name="compositionRootType">The type of an <see cref="T:Stashbox.ICompositionRoot" /> implementation.</param>
            <param name="compositionRootArguments">Optional composition root constructor arguments.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyCollectionRegistrator.ComposeBy(Stashbox.ICompositionRoot)">
            <summary>
            Composes services by calling the <see cref="M:Stashbox.ICompositionRoot.Compose(Stashbox.IStashboxContainer)" /> method of the given root.
            </summary>
            <param name="compositionRoot">The composition root instance.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="T:Stashbox.IDependencyRegistrator">
            <summary>
            Represents a dependency registrator.
            </summary>
        </member>
        <member name="M:Stashbox.IDependencyRegistrator.Register``2(System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``1}})">
            <summary>
            Registers a service into the container.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <typeparam name="TTo">The implementation type.</typeparam>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyRegistrator.Register``2(System.Object)">
            <summary>
            Registers a service into the container with a name.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyRegistrator.Register``1(System.Type,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``0}})">
            <summary>
            Registers a service into the container.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <param name="typeTo">The implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyRegistrator.Register(System.Type,System.Type,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers a service into the container.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="typeTo">The implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyRegistrator.Register``1(System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``0}})">
            <summary>
            Registers a service into the container.
            </summary>
            <typeparam name="TTo">The service/implementation type.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyRegistrator.Register``1(System.Object)">
            <summary>
            Registers a service into the container.
            </summary>
            <typeparam name="TTo">The service/implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyRegistrator.Register(System.Type,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers a service into the container.
            </summary>
            <param name="typeTo">The service/implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyRegistrator.RegisterSingleton``2(System.Object)">
            <summary>
            Registers a named service with singleton lifetime.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyRegistrator.RegisterSingleton``1(System.Object)">
            <summary>
            Registers a named service with singleton lifetime.
            </summary>
            <typeparam name="TTo">The service/implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyRegistrator.RegisterSingleton(System.Type,System.Type,System.Object)">
            <summary>
            Registers a named service with singleton lifetime.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="typeTo">The implementation type.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyRegistrator.RegisterScoped``2(System.Object)">
            <summary>
            Registers a named service with scoped lifetime.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyRegistrator.RegisterScoped(System.Type,System.Type,System.Object)">
            <summary>
            Registers a named service with scoped lifetime.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="typeTo">The implementation type.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyRegistrator.RegisterScoped``1(System.Object)">
            <summary>
            Registers a named service with scoped lifetime.
            </summary>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyRegistrator.RegisterInstance``1(``0,System.Object,System.Boolean,System.Action{``0})">
            <summary>
            Registers an already constructed instance into the container.
            </summary>
            <typeparam name="TInstance">The service type.</typeparam>
            <param name="instance">The constructed instance.</param>
            <param name="name">The name of the registration.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from disposal tracking.</param>
            <param name="finalizerDelegate">The cleanup delegate to call before dispose.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyRegistrator.RegisterInstance(System.Object,System.Type,System.Object,System.Boolean)">
            <summary>
            Registers an already constructed instance into the container.
            </summary>
            <param name="instance">The constructed instance.</param>
            <param name="serviceType">The service type.</param>
            <param name="name">The name of the registration.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from disposal tracking.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyRegistrator.WireUp``1(``0,System.Object,System.Boolean,System.Action{``0})">
            <summary>
            Registers an already constructed instance, but the container will perform injections and extensions on it.
            </summary>
            <typeparam name="TInstance">The service type.</typeparam>
            <param name="instance">The constructed instance.</param>
            <param name="name">The name of the registration.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from disposal tracking.</param>
            <param name="finalizerDelegate">The cleanup delegate to call before dispose.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyRegistrator.WireUp(System.Object,System.Type,System.Object,System.Boolean)">
            <summary>
            Registers an already constructed instance, but the container will perform injections and extensions on it.
            </summary>
            <param name="instance">The constructed instance.</param>
            <param name="serviceType">The service type.</param>
            <param name="name">The name of the registration.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from disposal tracking.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="T:Stashbox.IDependencyReMapper">
            <summary>
            Represents a dependency remapper.
            </summary>
        </member>
        <member name="M:Stashbox.IDependencyReMapper.ReMap``2(System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``1}})">
            <summary>
            Replaces an existing registration mapping.
            </summary>
            <typeparam name="TFrom">The service type to re-map.</typeparam>
            <typeparam name="TTo">The implementation type to re-map.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyReMapper.ReMap``1(System.Type,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``0}})">
            <summary>
            Replaces an existing registration mapping.
            </summary>
            <typeparam name="TFrom">The service type to re-map.</typeparam>
            <param name="typeTo">The implementation type to re-map.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyReMapper.ReMap(System.Type,System.Type,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Replaces an existing registration mapping.
            </summary>
            <param name="typeFrom">The service type to re-map.</param>
            <param name="typeTo">The implementation type to re-map.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyReMapper.ReMap``1(System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``0}})">
            <summary>
            Replaces an existing registration mapping.
            </summary>
            <typeparam name="TTo">The service/implementation type to re-map.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyReMapper.ReMapDecorator(System.Type,System.Type,System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator})">
            <summary>
            Replaces an existing decorator mapping.
            </summary>
            <param name="typeFrom">The service type to re-map.</param>
            <param name="typeTo">The implementation type to re-map.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyReMapper.ReMapDecorator``2(System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator{``0,``1}})">
            <summary>
            Replaces an existing decorator mapping.
            </summary>
            <typeparam name="TFrom">The service type to re-map.</typeparam>
            <typeparam name="TTo">The implementation type to re-map.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IDependencyReMapper.ReMapDecorator``1(System.Type,System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator{``0,``0}})">
            <summary>
            Replaces an existing decorator mapping.
            </summary>
            <typeparam name="TFrom">The service type to re-map.</typeparam>
            <param name="typeTo">The implementation type to re-map.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="T:Stashbox.IDependencyResolver">
            <summary>
            Represents a dependency resolver.
            </summary>
        </member>
        <member name="M:Stashbox.IDependencyResolver.Resolve(System.Type)">
            <summary>
            Resolves an instance from the container.
            </summary>
            <param name="typeFrom">The type of the requested service.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.IDependencyResolver.Resolve(System.Type,System.Object,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves a named instance from the container with dependency overrides.
            </summary>
            <param name="typeFrom">The type of the requested service.</param>
            <param name="name">The name of the requested service.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.IDependencyResolver.ResolveOrDefault(System.Type)">
            <summary>
            Resolves an instance from the container or returns default if the type is not resolvable.
            </summary>
            <param name="typeFrom">The type of the requested service.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.IDependencyResolver.ResolveOrDefault(System.Type,System.Object,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves an instance from the container with dependency overrides or returns default if the type is not resolvable.
            </summary>
            <param name="typeFrom">The type of the requested service.</param>
            <param name="name">The name of the requested service.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.IDependencyResolver.ResolveFactory(System.Type,System.Object,Stashbox.Resolution.ResolutionBehavior,System.Type[])">
            <summary>
            Returns a factory delegate that can be used to activate the service.
            </summary>
            <param name="typeFrom">The type of the requested instances.</param>
            <param name="name">The name of the requested registration.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <param name="parameterTypes">The parameter type.</param>
            <returns>The factory delegate.</returns>
        </member>
        <member name="M:Stashbox.IDependencyResolver.ResolveFactoryOrDefault(System.Type,System.Object,Stashbox.Resolution.ResolutionBehavior,System.Type[])">
            <summary>
            Returns a factory delegate that can be used to activate the service or returns default if the type is not resolvable.
            </summary>
            <param name="typeFrom">The type of the requested instances.</param>
            <param name="name">The name of the requested registration.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <param name="parameterTypes">The parameter type.</param>
            <returns>The factory delegate.</returns>
        </member>
        <member name="M:Stashbox.IDependencyResolver.BeginScope(System.Object,System.Boolean)">
            <summary>
            Creates a new scope.
            </summary>
            <param name="name">The name of the scope.</param>
            <param name="attachToParent">If true, the new scope will be attached to the lifecycle of its parent scope. When the parent is being disposed, the new scope will be disposed with it.</param>
            <returns>The created scope.</returns>
        </member>
        <member name="M:Stashbox.IDependencyResolver.PutInstanceInScope(System.Type,System.Object,System.Boolean,System.Object)">
            <summary>
            Puts an instance into the scope. The instance will be disposed along with the scope disposal.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="instance">The instance.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from disposal tracking.</param>
            <param name="name">The dependency name of the instance.</param>
            <returns>The scope.</returns>
        </member>
        <member name="M:Stashbox.IDependencyResolver.BuildUp``1(``0,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Builds up an existing instance. This means the container performs member and method injections on it without registering it into the container.
            </summary>
            <typeparam name="TTo">The type of the requested instance.</typeparam>
            <param name="instance">The instance to build up.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The built object.</returns>
        </member>
        <member name="M:Stashbox.IDependencyResolver.Activate(System.Type,Stashbox.Resolution.ResolutionBehavior,System.Object[])">
            <summary>
            Activates an object without registering it into the container. If you want to resolve a
            registered service use the <see cref="M:Stashbox.IDependencyResolver.Resolve(System.Type)" /> method instead.
            </summary>
            <param name="type">The type to activate.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <param name="arguments">Optional dependency overrides.</param>
            <returns>The built object.</returns>
        </member>
        <member name="M:Stashbox.IDependencyResolver.InvokeAsyncInitializers(System.Threading.CancellationToken)">
            <summary>
            Calls the registered asynchronous initializers of all resolved objects.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>The initializer task.</returns>
        </member>
        <member name="M:Stashbox.IDependencyResolver.CanResolve(System.Type,System.Object,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Checks whether a type can be resolved by the container, or not.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="name">The registration name.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>True if the service can be resolved, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.IDependencyResolver.GetDelegateCacheEntries">
            <summary>
            Returns all cached service resolution delegates.
            </summary>
            <returns>The service resolution delegates.</returns>
        </member>
        <member name="T:Stashbox.IFuncRegistrator">
            <summary>
            Represents a factory registrator.
            </summary>
        </member>
        <member name="M:Stashbox.IFuncRegistrator.RegisterFunc``1(System.Func{Stashbox.IDependencyResolver,``0},System.Object)">
            <summary>
            Registers a service with a factory resolver.
            </summary>
            <typeparam name="TService">The service type.</typeparam>
            <param name="factory">The factory delegate.</param>
            <param name="name">The name of the factory registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IFuncRegistrator.RegisterFunc``2(System.Func{``0,Stashbox.IDependencyResolver,``1},System.Object)">
            <summary>
            Registers a service with a factory resolver.
            </summary>
            <typeparam name="T1">The first parameter of the factory.</typeparam>
            <typeparam name="TService">The service type.</typeparam>
            <param name="factory">The factory delegate.</param>
            <param name="name">The name of the factory registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IFuncRegistrator.RegisterFunc``3(System.Func{``0,``1,Stashbox.IDependencyResolver,``2},System.Object)">
            <summary>
            Registers a service with a factory resolver.
            </summary>
            <typeparam name="T1">The first parameter of the factory.</typeparam>
            <typeparam name="T2">The second parameter of the factory.</typeparam>
            <typeparam name="TService">The service type.</typeparam>
            <param name="factory">The factory delegate.</param>
            <param name="name">The name of the factory registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IFuncRegistrator.RegisterFunc``4(System.Func{``0,``1,``2,Stashbox.IDependencyResolver,``3},System.Object)">
            <summary>
            Registers a service with a factory resolver.
            </summary>
            <typeparam name="T1">The first parameter of the factory.</typeparam>
            <typeparam name="T2">The second parameter of the factory.</typeparam>
            <typeparam name="T3">The third parameter of the factory.</typeparam>
            <typeparam name="TService">The service type.</typeparam>
            <param name="factory">The factory delegate.</param>
            <param name="name">The name of the factory registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.IFuncRegistrator.RegisterFunc``5(System.Func{``0,``1,``2,``3,Stashbox.IDependencyResolver,``4},System.Object)">
            <summary>
            Registers a service with a factory resolver.
            </summary>
            <typeparam name="T1">The first parameter of the factory.</typeparam>
            <typeparam name="T2">The second parameter of the factory.</typeparam>
            <typeparam name="T3">The third parameter of the factory.</typeparam>
            <typeparam name="T4">The fourth parameter of the factory.</typeparam>
            <typeparam name="TService">The service type.</typeparam>
            <param name="factory">The factory delegate.</param>
            <param name="name">The name of the factory registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="T:Stashbox.IResolutionScope">
            <summary>
            Represents a resolution scope.
            </summary>
        </member>
        <member name="P:Stashbox.IResolutionScope.ParentScope">
            <summary>
            The parent scope.
            </summary>
        </member>
        <member name="P:Stashbox.IResolutionScope.Name">
            <summary>
            The name of the scope, if it's null then it's a regular nameless scope.
            </summary>
        </member>
        <member name="M:Stashbox.IResolutionScope.AddDisposableTracking(System.Object)">
            <summary>
            Adds a service to dispose tracking.
            </summary>
            <param name="disposable">The <see cref="T:System.IDisposable" /> object.</param>
            <returns>The <see cref="T:System.IDisposable" /> object.</returns>
        </member>
        <member name="M:Stashbox.IResolutionScope.AddRequestContextAwareDisposableTracking(System.Object,Stashbox.Resolution.IRequestContext)">
            <summary>
            Adds a service to dispose tracking.
            </summary>
            <param name="disposable">The <see cref="T:System.IDisposable" /> object.</param>
            <param name="requestContext">The request context.</param>
            <returns>The <see cref="T:System.IDisposable" /> object.</returns>
        </member>
        <member name="M:Stashbox.IResolutionScope.AddWithFinalizer(System.Object,System.Action{System.Object})">
            <summary>
            Adds a service with a cleanup delegate.
            </summary>
            <param name="finalizable">The object to cleanup.</param>
            <param name="finalizer">The cleanup delegate.</param>
            <returns>The object to cleanup.</returns>
        </member>
        <member name="M:Stashbox.IResolutionScope.AddWithAsyncInitializer(System.Object,System.Func{System.Object,Stashbox.IDependencyResolver,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Adds a service with an async initializer delegate.
            </summary>
            <param name="initializable">The object to initialize.</param>
            <param name="initializer">The async initializer delegate.</param>
            <returns>The object to initialize.</returns>
        </member>
        <member name="M:Stashbox.IResolutionScope.GetOrAddScopedObject(System.Int32,System.Func{Stashbox.IResolutionScope,Stashbox.Resolution.IRequestContext,System.Object},Stashbox.Resolution.IRequestContext,System.Type)">
            <summary>
            Returns an existing scoped object or adds it into the scope if it doesn't exist.
            </summary>
            <param name="key">The key.</param>
            <param name="factory">The value factory used to create the object if it doesn't exist yet.</param>
            <param name="requestContext">The request context.</param>
            <param name="serviceType">The type of the service.</param>
            <returns>The scoped object.</returns>
        </member>
        <member name="M:Stashbox.IResolutionScope.InvalidateDelegateCache">
            <summary>
            Invalidates the delegate cache.
            </summary>
        </member>
        <member name="M:Stashbox.IResolutionScope.GetActiveScopeNames">
            <summary>
            Gets the names of the already opened scopes.
            </summary>
            <returns>The scope names.</returns>
        </member>
        <member name="T:Stashbox.IStashboxContainer">
            <summary>
            Represents a dependency injection container.
            </summary>
        </member>
        <member name="P:Stashbox.IStashboxContainer.ContainerContext">
            <summary>
            The container context.
            </summary>
        </member>
        <member name="P:Stashbox.IStashboxContainer.ChildContainers">
            <summary>
            Child containers created by this container.
            </summary>
        </member>
        <member name="M:Stashbox.IStashboxContainer.RegisterResolver(Stashbox.Resolution.IResolver)">
            <summary>
            Registers an <see cref="T:Stashbox.Resolution.IResolver" />.
            </summary>
            <param name="resolver">The resolver implementation.</param>
        </member>
        <member name="M:Stashbox.IStashboxContainer.CreateChildContainer(System.Action{Stashbox.Configuration.ContainerConfigurator},System.Boolean)">
            <summary>
            Creates a child container.
            </summary>
            <param name="config">The action delegate which will configure the child container.</param>
            <param name="attachToParent">If true, the new child container will be attached to the lifecycle of its parent. When the parent is being disposed, the child will be disposed with it.</param>
        </member>
        <member name="M:Stashbox.IStashboxContainer.CreateChildContainer(System.Object,System.Action{Stashbox.IStashboxContainer},System.Boolean)">
            <summary>
            Creates a child container.
            </summary>
            <param name="identifier">The identifier of the child container.</param>
            <param name="config">The action delegate which will configure the child container.</param>
            <param name="attachToParent">If true, the new child container will be attached to the lifecycle of its parent. When the parent is being disposed, the child will be disposed with it.</param>
        </member>
        <member name="M:Stashbox.IStashboxContainer.GetChildContainer(System.Object)">
            <summary>
            Returns the child container identified by <paramref name="identifier" />.
            </summary>
            <param name="identifier">The identifier of the child container.</param>
            <returns>The child container if it's exist, otherwise null.</returns>
        </member>
        <member name="M:Stashbox.IStashboxContainer.IsRegistered``1(System.Object)">
            <summary>
            Checks whether a type is registered in the container.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <param name="name">The registration name.</param>
            <returns>True if the service is registered, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.IStashboxContainer.IsRegistered(System.Type,System.Object)">
            <summary>
            Checks whether a type is registered in the container.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="name">The registration name.</param>
            <returns>True if the service is registered, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.IStashboxContainer.Configure(System.Action{Stashbox.Configuration.ContainerConfigurator})">
            <summary>
            Configures the container.
            </summary>
            <param name="config">The action delegate which will configure the container.</param>
        </member>
        <member name="M:Stashbox.IStashboxContainer.Validate">
            <summary>
            Validates the current state of the container.
            </summary>
        </member>
        <member name="M:Stashbox.IStashboxContainer.GetRegistrationMappings">
            <summary>
            Returns all registration mappings.
            </summary>
            <returns>The registration mappings.</returns>
        </member>
        <member name="M:Stashbox.IStashboxContainer.GetRegistrationDiagnostics">
            <summary>
            Returns the details about the registrations.
            </summary>
            <returns>The detailed string representation of the registration.</returns>
        </member>
        <member name="T:Stashbox.Lifetime.ExpressionLifetimeDescriptor">
            <summary>
            Represents a lifetime descriptor which applies to expressions.
            </summary>
        </member>
        <member name="M:Stashbox.Lifetime.ExpressionLifetimeDescriptor.ApplyLifetime(System.Linq.Expressions.Expression,Stashbox.Registration.ServiceRegistration,Stashbox.Resolution.ResolutionContext,System.Type)">
            <summary>
            Derived types are using this method to apply their lifetime to the instance creation.
            </summary>
            <param name="expression">The expression the lifetime should apply to.</param>
            <param name="serviceRegistration">The service registration.</param>
            <param name="resolutionContext">The info about the actual resolution.</param>
            <param name="resolveType">The type of the resolved service.</param>
            <returns>The lifetime managed expression.</returns>
        </member>
        <member name="T:Stashbox.Lifetime.FactoryLifetimeDescriptor">
            <summary>
            Represents a lifetime descriptor which applies to factory delegates.
            </summary>
        </member>
        <member name="M:Stashbox.Lifetime.FactoryLifetimeDescriptor.ApplyLifetime(System.Func{Stashbox.IResolutionScope,Stashbox.Resolution.IRequestContext,System.Object},Stashbox.Registration.ServiceRegistration,Stashbox.Resolution.ResolutionContext,System.Type)">
            <summary>
            Derived types are using this method to apply their lifetime to the instance creation.
            </summary>
            <param name="factory">The factory which can be used to instantiate the service.</param>
            <param name="serviceRegistration">The service registration.</param>
            <param name="resolutionContext">The info about the actual resolution.</param>
            <param name="resolveType">The type of the resolved service.</param>
            <returns>The lifetime managed expression.</returns>
        </member>
        <member name="T:Stashbox.Lifetime.LifetimeDescriptor">
            <summary>
            Represents a lifetime descriptor.
            </summary>
        </member>
        <member name="P:Stashbox.Lifetime.LifetimeDescriptor.LifeSpan">
            <summary>
            An indicator used to validate the lifetime configuration of the resolution tree.
            Services with longer life-span shouldn't contain dependencies with shorter ones.
            </summary>
        </member>
        <member name="P:Stashbox.Lifetime.LifetimeDescriptor.Name">
            <summary>
            The name of the lifetime, used only for diagnostic reasons.
            </summary>
        </member>
        <member name="M:Stashbox.Lifetime.LifetimeDescriptor.#ctor">
            <summary>
            Constructs the lifetime descriptor.
            </summary>
        </member>
        <member name="T:Stashbox.Lifetime.Lifetimes">
            <summary>
            Contains all the built-in lifetime managers.
            </summary>
        </member>
        <member name="F:Stashbox.Lifetime.Lifetimes.Transient">
            <summary>
            Transient lifetime.
            </summary>
        </member>
        <member name="F:Stashbox.Lifetime.Lifetimes.Singleton">
            <summary>
            Singleton lifetime.
            </summary>
        </member>
        <member name="F:Stashbox.Lifetime.Lifetimes.Scoped">
            <summary>
            Scoped lifetime.
            </summary>
        </member>
        <member name="F:Stashbox.Lifetime.Lifetimes.PerScopedRequest">
            <summary>
            Per scoped request lifetime, that re-uses the produced instance within a scoped service's resolution tree.
            </summary>
        </member>
        <member name="F:Stashbox.Lifetime.Lifetimes.PerRequest">
            <summary>
            Per resolution request lifetime.
            </summary>
        </member>
        <member name="M:Stashbox.Lifetime.Lifetimes.NamedScope(System.Object)">
            <summary>
            Produces a NamedScope lifetime.
            </summary>
        </member>
        <member name="T:Stashbox.Lifetime.NamedScopeLifetime">
            <summary>
            Represents a named scope lifetime.
            </summary>
        </member>
        <member name="F:Stashbox.Lifetime.NamedScopeLifetime.ScopeName">
            <summary>
            The name of the scope where this lifetime activates.
            </summary>
        </member>
        <member name="P:Stashbox.Lifetime.NamedScopeLifetime.LifeSpan">
            <summary>
            An indicator used to validate the lifetime configuration of the resolution tree.
            Services with longer life-span shouldn't contain dependencies with shorter ones.
            </summary>
        </member>
        <member name="M:Stashbox.Lifetime.NamedScopeLifetime.#ctor(System.Object)">
            <summary>
            Constructs a <see cref="T:Stashbox.Lifetime.NamedScopeLifetime" />.
            </summary>
            <param name="scopeName">
            </param>
        </member>
        <member name="M:Stashbox.Lifetime.NamedScopeLifetime.ApplyLifetime(System.Func{Stashbox.IResolutionScope,Stashbox.Resolution.IRequestContext,System.Object},Stashbox.Registration.ServiceRegistration,Stashbox.Resolution.ResolutionContext,System.Type)">
            <summary>
            Derived types are using this method to apply their lifetime to the instance creation.
            </summary>
            <param name="factory">The factory which can be used to instantiate the service.</param>
            <param name="serviceRegistration">The service registration.</param>
            <param name="resolutionContext">The info about the actual resolution.</param>
            <param name="resolveType">The type of the resolved service.</param>
            <returns>The lifetime managed expression.</returns>
        </member>
        <member name="T:Stashbox.Lifetime.PerRequestLifetime">
            <summary>
            Represents a per-request lifetime.
            </summary>
        </member>
        <member name="P:Stashbox.Lifetime.PerRequestLifetime.StoreResultInLocalVariable" />
        <member name="M:Stashbox.Lifetime.PerRequestLifetime.ApplyLifetime(System.Func{Stashbox.IResolutionScope,Stashbox.Resolution.IRequestContext,System.Object},Stashbox.Registration.ServiceRegistration,Stashbox.Resolution.ResolutionContext,System.Type)">
            <summary>
            Derived types are using this method to apply their lifetime to the instance creation.
            </summary>
            <param name="factory">The factory which can be used to instantiate the service.</param>
            <param name="serviceRegistration">The service registration.</param>
            <param name="resolutionContext">The info about the actual resolution.</param>
            <param name="resolveType">The type of the resolved service.</param>
            <returns>The lifetime managed expression.</returns>
        </member>
        <member name="T:Stashbox.Lifetime.PerScopedRequestLifetime">
            <summary>
            Represents a lifetime that re-uses an instance within a scoped service's resolution tree.
            </summary>
        </member>
        <member name="P:Stashbox.Lifetime.PerScopedRequestLifetime.StoreResultInLocalVariable" />
        <member name="T:Stashbox.Lifetime.ScopedLifetime">
            <summary>
            Represents a scoped lifetime.
            </summary>
        </member>
        <member name="P:Stashbox.Lifetime.ScopedLifetime.LifeSpan">
            <summary>
            An indicator used to validate the lifetime configuration of the resolution tree.
            Services with longer life-span shouldn't contain dependencies with shorter ones.
            </summary>
        </member>
        <member name="P:Stashbox.Lifetime.ScopedLifetime.StoreResultInLocalVariable" />
        <member name="M:Stashbox.Lifetime.ScopedLifetime.ApplyLifetime(System.Func{Stashbox.IResolutionScope,Stashbox.Resolution.IRequestContext,System.Object},Stashbox.Registration.ServiceRegistration,Stashbox.Resolution.ResolutionContext,System.Type)">
            <summary>
            Derived types are using this method to apply their lifetime to the instance creation.
            </summary>
            <param name="factory">The factory which can be used to instantiate the service.</param>
            <param name="serviceRegistration">The service registration.</param>
            <param name="resolutionContext">The info about the actual resolution.</param>
            <param name="resolveType">The type of the resolved service.</param>
            <returns>The lifetime managed expression.</returns>
        </member>
        <member name="T:Stashbox.Lifetime.SingletonLifetime">
            <summary>
            Represents a singleton lifetime.
            </summary>
        </member>
        <member name="P:Stashbox.Lifetime.SingletonLifetime.LifeSpan">
            <summary>
            An indicator used to validate the lifetime configuration of the resolution tree.
            Services with longer life-span shouldn't contain dependencies with shorter ones.
            </summary>
        </member>
        <member name="P:Stashbox.Lifetime.SingletonLifetime.StoreResultInLocalVariable" />
        <member name="M:Stashbox.Lifetime.SingletonLifetime.ApplyLifetime(System.Func{Stashbox.IResolutionScope,Stashbox.Resolution.IRequestContext,System.Object},Stashbox.Registration.ServiceRegistration,Stashbox.Resolution.ResolutionContext,System.Type)">
            <summary>
            Derived types are using this method to apply their lifetime to the instance creation.
            </summary>
            <param name="factory">The factory which can be used to instantiate the service.</param>
            <param name="serviceRegistration">The service registration.</param>
            <param name="resolutionContext">The info about the actual resolution.</param>
            <param name="resolveType">The type of the resolved service.</param>
            <returns>The lifetime managed expression.</returns>
        </member>
        <member name="T:Stashbox.Lifetime.TransientLifetime">
            <summary>
            Represents a transient lifetime.
            </summary>
        </member>
        <member name="M:Stashbox.Lifetime.TransientLifetime.ApplyLifetime(System.Linq.Expressions.Expression,Stashbox.Registration.ServiceRegistration,Stashbox.Resolution.ResolutionContext,System.Type)">
            <summary>
            Derived types are using this method to apply their lifetime to the instance creation.
            </summary>
            <param name="expression">The expression the lifetime should apply to.</param>
            <param name="serviceRegistration">The service registration.</param>
            <param name="resolutionContext">The info about the actual resolution.</param>
            <param name="resolveType">The type of the resolved service.</param>
            <returns>The lifetime managed expression.</returns>
        </member>
        <member name="T:Stashbox.Metadata`2">
            <summary>
            Describes a wrapper for services with additional metadata.
            </summary>
            <typeparam name="TService">The service type.</typeparam>
            <typeparam name="TMeta">The additional metadata type.</typeparam>
        </member>
        <member name="F:Stashbox.Metadata`2.Service">
            <summary>
            The service.
            </summary>
        </member>
        <member name="F:Stashbox.Metadata`2.Data">
            <summary>
            The additional metadata.
            </summary>
        </member>
        <member name="M:Stashbox.Metadata`2.#ctor(`0,`1)">
            <summary>
            Constructs a <see cref="T:Stashbox.Metadata`2" />.
            </summary>
            <param name="service">The service.</param>
            <param name="data">The additional metadata.</param>
        </member>
        <member name="T:Stashbox.Multitenant.ITenantDistributor">
            <summary>
            Represents a tenant distributor that manages tenants in a multi-tenant environment.
            </summary>
        </member>
        <member name="M:Stashbox.Multitenant.ITenantDistributor.ConfigureTenant(System.Object,System.Action{Stashbox.IStashboxContainer},System.Boolean)">
            <summary>
            Adds a tenant with a specified service configuration to the distributor.
            </summary>
            <param name="tenantId">The identifier of the tenant.</param>
            <param name="tenantConfig">The service configuration of the tenant.</param>
            <param name="attachTenantToRoot">If true, the new tenant will be attached to the lifecycle of the root container. When the root is being disposed, the tenant will be disposed with it.</param>
        </member>
        <member name="M:Stashbox.Multitenant.ITenantDistributor.GetTenant(System.Object)">
            <summary>
            Gets a pre-configured <see cref="T:Stashbox.IDependencyResolver" /> from the distributor which represents a tenant identified by the given id.
            When the requested tenant doesn't exist a null value will be returned.
            </summary>
            <param name="tenantId">The identifier of the tenant.</param>
            <returns>The pre-configured tenant container if it's exist, otherwise null.</returns>
        </member>
        <member name="T:Stashbox.Multitenant.TenantDistributor">
            <summary>
            Represents a tenant distributor that manages tenants in a multi-tenant environment.
            </summary>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.#ctor(Stashbox.IStashboxContainer)">
            <summary>
            Constructs a <see cref="T:Stashbox.Multitenant.TenantDistributor" />.
            </summary>
            <param name="rootContainer">A pre-configured root container, used to create child tenant containers. If not set, a new will be created.</param>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.ConfigureTenant(System.Object,System.Action{Stashbox.IStashboxContainer},System.Boolean)">
            <summary>
            Adds a tenant with a specified service configuration to the distributor.
            </summary>
            <param name="tenantId">The identifier of the tenant.</param>
            <param name="tenantConfig">The service configuration of the tenant.</param>
            <param name="attachTenantToRoot">If true, the new tenant will be attached to the lifecycle of the root container. When the root is being disposed, the tenant will be disposed with it.</param>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.GetTenant(System.Object)">
            <summary>
            Gets a pre-configured <see cref="T:Stashbox.IDependencyResolver" /> from the distributor which represents a tenant identified by the given id.
            When the requested tenant doesn't exist a null value will be returned.
            </summary>
            <param name="tenantId">The identifier of the tenant.</param>
            <returns>The pre-configured tenant container if it's exist, otherwise null.</returns>
        </member>
        <member name="P:Stashbox.Multitenant.TenantDistributor.ChildContainers">
            <summary>
            Child containers created by this container.
            </summary>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterResolver(Stashbox.Resolution.IResolver)">
            <summary>
            Registers an <see cref="T:Stashbox.Resolution.IResolver" />.
            </summary>
            <param name="resolver">The resolver implementation.</param>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.CreateChildContainer(System.Action{Stashbox.Configuration.ContainerConfigurator},System.Boolean)">
            <summary>
            Creates a child container.
            </summary>
            <param name="config">The action delegate which will configure the child container.</param>
            <param name="attachToParent">If true, the new child container will be attached to the lifecycle of its parent. When the parent is being disposed, the child will be disposed with it.</param>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.CreateChildContainer(System.Object,System.Action{Stashbox.IStashboxContainer},System.Boolean)">
            <summary>
            Creates a child container.
            </summary>
            <param name="identifier">The identifier of the child container.</param>
            <param name="config">The action delegate which will configure the child container.</param>
            <param name="attachToParent">If true, the new child container will be attached to the lifecycle of its parent. When the parent is being disposed, the child will be disposed with it.</param>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.GetChildContainer(System.Object)">
            <summary>
            Returns the child container identified by <paramref name="identifier" />.
            </summary>
            <param name="identifier">The identifier of the child container.</param>
            <returns>The child container if it's exist, otherwise null.</returns>
        </member>
        <member name="P:Stashbox.Multitenant.TenantDistributor.ContainerContext">
            <summary>
            The container context.
            </summary>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.IsRegistered``1(System.Object)">
            <summary>
            Checks whether a type is registered in the container.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <param name="name">The registration name.</param>
            <returns>True if the service is registered, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.IsRegistered(System.Type,System.Object)">
            <summary>
            Checks whether a type is registered in the container.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="name">The registration name.</param>
            <returns>True if the service is registered, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.Configure(System.Action{Stashbox.Configuration.ContainerConfigurator})">
            <summary>
            Configures the container.
            </summary>
            <param name="config">The action delegate which will configure the container.</param>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.Validate">
            <summary>
            Validates the current state of the container.
            </summary>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.GetRegistrationMappings">
            <summary>
            Returns all registration mappings.
            </summary>
            <returns>The registration mappings.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.GetRegistrationDiagnostics">
            <summary>
            Returns the details about the registrations.
            </summary>
            <returns>The detailed string representation of the registration.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.Dispose" />
        <member name="M:Stashbox.Multitenant.TenantDistributor.Register``2(System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``1}})">
            <summary>
            Registers a service into the container.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <typeparam name="TTo">The implementation type.</typeparam>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.Register``2(System.Object)">
            <summary>
            Registers a service into the container with a name.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.Register``1(System.Type,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``0}})">
            <summary>
            Registers a service into the container.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <param name="typeTo">The implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.Register(System.Type,System.Type,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers a service into the container.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="typeTo">The implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.Register``1(System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``0}})">
            <summary>
            Registers a service into the container.
            </summary>
            <typeparam name="TTo">The service/implementation type.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.Register``1(System.Object)">
            <summary>
            Registers a service into the container.
            </summary>
            <typeparam name="TTo">The service/implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.Register(System.Type,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers a service into the container.
            </summary>
            <param name="typeTo">The service/implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterSingleton``2(System.Object)">
            <summary>
            Registers a named service with singleton lifetime.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterSingleton``1(System.Object)">
            <summary>
            Registers a named service with singleton lifetime.
            </summary>
            <typeparam name="TTo">The service/implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterSingleton(System.Type,System.Type,System.Object)">
            <summary>
            Registers a named service with singleton lifetime.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="typeTo">The implementation type.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterScoped``2(System.Object)">
            <summary>
            Registers a named service with scoped lifetime.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterScoped(System.Type,System.Type,System.Object)">
            <summary>
            Registers a named service with scoped lifetime.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="typeTo">The implementation type.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterScoped``1(System.Object)">
            <summary>
            Registers a named service with scoped lifetime.
            </summary>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterInstance``1(``0,System.Object,System.Boolean,System.Action{``0})">
            <summary>
            Registers an already constructed instance into the container.
            </summary>
            <typeparam name="TInstance">The service type.</typeparam>
            <param name="instance">The constructed instance.</param>
            <param name="name">The name of the registration.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from disposal tracking.</param>
            <param name="finalizerDelegate">The cleanup delegate to call before dispose.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterInstance(System.Object,System.Type,System.Object,System.Boolean)">
            <summary>
            Registers an already constructed instance into the container.
            </summary>
            <param name="instance">The constructed instance.</param>
            <param name="serviceType">The service type.</param>
            <param name="name">The name of the registration.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from disposal tracking.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.WireUp``1(``0,System.Object,System.Boolean,System.Action{``0})">
            <summary>
            Registers an already constructed instance, but the container will perform injections and extensions on it.
            </summary>
            <typeparam name="TInstance">The service type.</typeparam>
            <param name="instance">The constructed instance.</param>
            <param name="name">The name of the registration.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from disposal tracking.</param>
            <param name="finalizerDelegate">The cleanup delegate to call before dispose.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.WireUp(System.Object,System.Type,System.Object,System.Boolean)">
            <summary>
            Registers an already constructed instance, but the container will perform injections and extensions on it.
            </summary>
            <param name="instance">The constructed instance.</param>
            <param name="serviceType">The service type.</param>
            <param name="name">The name of the registration.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from disposal tracking.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.GetService(System.Type)" />
        <member name="M:Stashbox.Multitenant.TenantDistributor.Resolve(System.Type)">
            <summary>
            Resolves an instance from the container.
            </summary>
            <param name="typeFrom">The type of the requested service.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.Resolve(System.Type,System.Object,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves a named instance from the container with dependency overrides.
            </summary>
            <param name="typeFrom">The type of the requested service.</param>
            <param name="name">The name of the requested service.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.ResolveOrDefault(System.Type)">
            <summary>
            Resolves an instance from the container or returns default if the type is not resolvable.
            </summary>
            <param name="typeFrom">The type of the requested service.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.ResolveOrDefault(System.Type,System.Object,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves an instance from the container with dependency overrides or returns default if the type is not resolvable.
            </summary>
            <param name="typeFrom">The type of the requested service.</param>
            <param name="name">The name of the requested service.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.ResolveFactory(System.Type,System.Object,Stashbox.Resolution.ResolutionBehavior,System.Type[])">
            <summary>
            Returns a factory delegate that can be used to activate the service.
            </summary>
            <param name="typeFrom">The type of the requested instances.</param>
            <param name="name">The name of the requested registration.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <param name="parameterTypes">The parameter type.</param>
            <returns>The factory delegate.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.ResolveFactoryOrDefault(System.Type,System.Object,Stashbox.Resolution.ResolutionBehavior,System.Type[])">
            <summary>
            Returns a factory delegate that can be used to activate the service or returns default if the type is not resolvable.
            </summary>
            <param name="typeFrom">The type of the requested instances.</param>
            <param name="name">The name of the requested registration.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <param name="parameterTypes">The parameter type.</param>
            <returns>The factory delegate.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.BeginScope(System.Object,System.Boolean)">
            <summary>
            Creates a new scope.
            </summary>
            <param name="name">The name of the scope.</param>
            <param name="attachToParent">If true, the new scope will be attached to the lifecycle of its parent scope. When the parent is being disposed, the new scope will be disposed with it.</param>
            <returns>The created scope.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.PutInstanceInScope(System.Type,System.Object,System.Boolean,System.Object)">
            <summary>
            Puts an instance into the scope. The instance will be disposed along with the scope disposal.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="instance">The instance.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from disposal tracking.</param>
            <param name="name">The dependency name of the instance.</param>
            <returns>The scope.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.BuildUp``1(``0,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Builds up an existing instance. This means the container performs member and method injections on it without registering it into the container.
            </summary>
            <typeparam name="TTo">The type of the requested instance.</typeparam>
            <param name="instance">The instance to build up.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The built object.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.Activate(System.Type,Stashbox.Resolution.ResolutionBehavior,System.Object[])">
            <summary>
            Activates an object without registering it into the container. If you want to resolve a
            registered service use the <see cref="M:Stashbox.IDependencyResolver.Resolve(System.Type)" /> method instead.
            </summary>
            <param name="type">The type to activate.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <param name="arguments">Optional dependency overrides.</param>
            <returns>The built object.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.InvokeAsyncInitializers(System.Threading.CancellationToken)">
            <summary>
            Calls the registered asynchronous initializers of all resolved objects.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>The initializer task.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.CanResolve(System.Type,System.Object,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Checks whether a type can be resolved by the container, or not.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="name">The registration name.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>True if the service can be resolved, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.GetDelegateCacheEntries">
            <summary>
            Returns all cached service resolution delegates.
            </summary>
            <returns>The service resolution delegates.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.ReMap``2(System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``1}})">
            <summary>
            Replaces an existing registration mapping.
            </summary>
            <typeparam name="TFrom">The service type to re-map.</typeparam>
            <typeparam name="TTo">The implementation type to re-map.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.ReMap``1(System.Type,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``0}})">
            <summary>
            Replaces an existing registration mapping.
            </summary>
            <typeparam name="TFrom">The service type to re-map.</typeparam>
            <param name="typeTo">The implementation type to re-map.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.ReMap(System.Type,System.Type,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Replaces an existing registration mapping.
            </summary>
            <param name="typeFrom">The service type to re-map.</param>
            <param name="typeTo">The implementation type to re-map.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.ReMap``1(System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``0}})">
            <summary>
            Replaces an existing registration mapping.
            </summary>
            <typeparam name="TTo">The service/implementation type to re-map.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.ReMapDecorator(System.Type,System.Type,System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator})">
            <summary>
            Replaces an existing decorator mapping.
            </summary>
            <param name="typeFrom">The service type to re-map.</param>
            <param name="typeTo">The implementation type to re-map.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.ReMapDecorator``2(System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator{``0,``1}})">
            <summary>
            Replaces an existing decorator mapping.
            </summary>
            <typeparam name="TFrom">The service type to re-map.</typeparam>
            <typeparam name="TTo">The implementation type to re-map.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.ReMapDecorator``1(System.Type,System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator{``0,``0}})">
            <summary>
            Replaces an existing decorator mapping.
            </summary>
            <typeparam name="TFrom">The service type to re-map.</typeparam>
            <param name="typeTo">The implementation type to re-map.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterTypesAs(System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Func{System.Type,System.Boolean},System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers a collection of types mapped to a service type.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="types">Types to register.</param>
            <param name="selector">The type selector. Used to filter which types should be excluded/included in the registration process.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterTypes(System.Collections.Generic.IEnumerable{System.Type},System.Func{System.Type,System.Boolean},System.Func{System.Type,System.Type,System.Boolean},System.Boolean,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers a collection of types into the container.
            </summary>
            <param name="types">Types to register.</param>
            <param name="selector">The type selector. Used to filter which types should be excluded/included in the registration process.</param>
            <param name="serviceTypeSelector">The service type selector. Used to filter which interface or base types the implementation should be mapped to.</param>
            <param name="registerSelf">If it's true, the types will be registered to their own type too.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.ComposeBy(System.Type,System.Object[])">
            <summary>
            Composes services by calling the <see cref="M:Stashbox.ICompositionRoot.Compose(Stashbox.IStashboxContainer)" /> method of the given root.
            </summary>
            <param name="compositionRootType">The type of an <see cref="T:Stashbox.ICompositionRoot" /> implementation.</param>
            <param name="compositionRootArguments">Optional composition root constructor arguments.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.ComposeBy(Stashbox.ICompositionRoot)">
            <summary>
            Composes services by calling the <see cref="M:Stashbox.ICompositionRoot.Compose(Stashbox.IStashboxContainer)" /> method of the given root.
            </summary>
            <param name="compositionRoot">The composition root instance.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterDecorator(System.Type,System.Type,System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator})">
            <summary>
            Registers a decorator service into the container.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="typeTo">The implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterDecorator``2(System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator{``0,``1}})">
            <summary>
            Registers a decorator service into the container.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterDecorator(System.Type,System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator})">
            <summary>
            Registers a decorator service into the container. 
            This function configures the registration with the <see cref="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.AsImplementedTypes" /> option.
            </summary>
            <param name="typeTo">The implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterDecorator``1(System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator{``0,``0}})">
            <summary>
            Registers a decorator service into the container. 
            This function configures the registration with the <see cref="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.AsImplementedTypes" /> option.
            </summary>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterDecorator``1(System.Type,System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator{``0,``0}})">
            <summary>
            Registers a decorator service into the container.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <param name="typeTo">The implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterFunc``1(System.Func{Stashbox.IDependencyResolver,``0},System.Object)">
            <summary>
            Registers a service with a factory resolver.
            </summary>
            <typeparam name="TService">The service type.</typeparam>
            <param name="factory">The factory delegate.</param>
            <param name="name">The name of the factory registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterFunc``2(System.Func{``0,Stashbox.IDependencyResolver,``1},System.Object)">
            <summary>
            Registers a service with a factory resolver.
            </summary>
            <typeparam name="T1">The first parameter of the factory.</typeparam>
            <typeparam name="TService">The service type.</typeparam>
            <param name="factory">The factory delegate.</param>
            <param name="name">The name of the factory registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterFunc``3(System.Func{``0,``1,Stashbox.IDependencyResolver,``2},System.Object)">
            <summary>
            Registers a service with a factory resolver.
            </summary>
            <typeparam name="T1">The first parameter of the factory.</typeparam>
            <typeparam name="T2">The second parameter of the factory.</typeparam>
            <typeparam name="TService">The service type.</typeparam>
            <param name="factory">The factory delegate.</param>
            <param name="name">The name of the factory registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterFunc``4(System.Func{``0,``1,``2,Stashbox.IDependencyResolver,``3},System.Object)">
            <summary>
            Registers a service with a factory resolver.
            </summary>
            <typeparam name="T1">The first parameter of the factory.</typeparam>
            <typeparam name="T2">The second parameter of the factory.</typeparam>
            <typeparam name="T3">The third parameter of the factory.</typeparam>
            <typeparam name="TService">The service type.</typeparam>
            <param name="factory">The factory delegate.</param>
            <param name="name">The name of the factory registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.Multitenant.TenantDistributor.RegisterFunc``5(System.Func{``0,``1,``2,``3,Stashbox.IDependencyResolver,``4},System.Object)">
            <summary>
            Registers a service with a factory resolver.
            </summary>
            <typeparam name="T1">The first parameter of the factory.</typeparam>
            <typeparam name="T2">The second parameter of the factory.</typeparam>
            <typeparam name="T3">The third parameter of the factory.</typeparam>
            <typeparam name="T4">The fourth parameter of the factory.</typeparam>
            <typeparam name="TService">The service type.</typeparam>
            <param name="factory">The factory delegate.</param>
            <param name="name">The name of the factory registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="T:Stashbox.ReadOnlyKeyValue`2">
            <summary>
            Represents a readonly key-value pair.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="F:Stashbox.ReadOnlyKeyValue`2.Key">
            <summary>
            The key.
            </summary>
        </member>
        <member name="F:Stashbox.ReadOnlyKeyValue`2.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Stashbox.ReadOnlyKeyValue`2.#ctor(`0,`1)">
            <summary>
            Constructs a <see cref="T:Stashbox.ReadOnlyKeyValue`2" />.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Stashbox.Registration.Fluent.BaseDecoratorConfigurator`1">
            <summary>
            Represents the generic base of the fluent registration api.
            </summary>
            <typeparam name="TConfigurator">
            </typeparam>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseDecoratorConfigurator`1.WhenDecoratedServiceIs``1">
            <summary>
            Sets a decorated target condition for the registration.
            </summary>
            <typeparam name="TTarget">The type of the parent.</typeparam>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseDecoratorConfigurator`1.WhenDecoratedServiceIs(System.Type)">
            <summary>
            Sets a decorated target condition for the registration.
            </summary>
            <param name="targetType">The type of the decorated service.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseDecoratorConfigurator`1.WhenDecoratedServiceIs(System.Object)">
            <summary>
            Sets a decorated target condition for the registration.
            </summary>
            <param name="name">The name of the decorated service.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseDecoratorConfigurator`1.WhenDecoratedServiceHas``1">
            <summary>
            Sets an attribute condition that the decorated target has to satisfy.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseDecoratorConfigurator`1.WhenDecoratedServiceHas(System.Type)">
            <summary>
            Sets an attribute condition that the decorated target has to satisfy.
            </summary>
            <param name="attributeType">The type of the attribute.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="T:Stashbox.Registration.Fluent.BaseFluentConfigurator`1">
            <summary>
            Represents the base of the fluent registration api.
            </summary>
            <typeparam name="TConfigurator">
            </typeparam>
        </member>
        <member name="P:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.ServiceType">
            <summary>
            The service type.
            </summary>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.HasServiceType``1">
            <summary>
            Determines whether the registration is mapped to the given service type.
            </summary>
            <typeparam name="TService">The target service type.</typeparam>
            <returns>True when the registration is mapped to the given service type, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.HasServiceType(System.Type)">
            <summary>
            Determines whether the registration is mapped to the given service type.
            </summary>
            <param name="serviceType">The target service type.</param>
            <returns>True when the registration is mapped to the given service type, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WithLifetime(Stashbox.Lifetime.LifetimeDescriptor)">
            <summary>
            Sets the lifetime of the registration.
            </summary>
            <param name="lifetime">An <see cref="T:Stashbox.Lifetime.LifetimeDescriptor" /> implementation.</param>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WithScopedLifetime">
            <summary>
            Sets scoped lifetime for the registration.
            </summary>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WithSingletonLifetime">
            <summary>
            Sets singleton lifetime for the registration.
            </summary>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WithTransientLifetime">
            <summary>
            Sets transient lifetime for the registration.
            </summary>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WithPerScopedRequestLifetime">
            <summary>
            Sets the lifetime to <see cref="T:Stashbox.Lifetime.PerScopedRequestLifetime" />. This lifetime will create a new instance between scoped services. This means
            that every scoped service will get a different instance but within their dependency tree it will behave as a singleton.
            </summary>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WithPerRequestLifetime">
            <summary>
            Sets the lifetime to <see cref="T:Stashbox.Lifetime.PerRequestLifetime" />. This lifetime will create a new instance between resolution requests. 
            Within the request the same instance will be re-used.
            </summary>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.InNamedScope(System.Object)">
            <summary>
            Sets a scope name condition for the registration, it will be used only when a scope with the given name requests it.
            </summary>
            <param name="scopeName">The name of the scope.</param>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.InScopeDefinedBy(System.Type)">
            <summary>
            Sets a condition for the registration that it will be used only within the scope defined by the given type.
            </summary>
            <param name="type">The type which defines the scope.</param>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.InScopeDefinedBy``1">
            <summary>
            Sets a condition for the registration that it will be used only within the scope defined by the given type.
            </summary>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WithDependencyBinding``1(System.Object)">
            <summary>
            Binds a constructor/method parameter or a property/field to a named registration, so the container will perform a named resolution on the bound dependency.
            </summary>
            <param name="dependencyName">The name of the bound named registration.</param>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WithDependencyBinding(System.Type,System.Object)">
            <summary>
            Binds a constructor/method parameter or a property/field to a named registration, so the container will perform a named resolution on the bound dependency.
            </summary>
            <param name="dependencyType">The type of the dependency to search for.</param>
            <param name="dependencyName">The name of the bound named registration.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WithDependencyBinding(System.String,System.Object)">
            <summary>
            Binds a constructor/method parameter or a property/field to a named registration, so the container will perform a named resolution on the bound dependency.
            </summary>
            <param name="parameterName">The parameter name of the dependency to search for.</param>
            <param name="dependencyName">The name of the bound named registration.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WhenDependantIs``1(System.Object)">
            <summary>
            Sets a parent target condition for the registration.
            </summary>
            <typeparam name="TTarget">The type of the parent.</typeparam>
            <param name="name">The optional name of the parent.</param>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WhenDependantIs(System.Type,System.Object)">
            <summary>
            Sets a parent target condition for the registration.
            </summary>
            <param name="targetType">The type of the parent.</param>
            <param name="name">The optional name of the parent.</param>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WhenInResolutionPathOf``1(System.Object)">
            <summary>
            Sets a resolution path condition for the registration. The service will be selected only in the resolution path of the given target.
            This means that only the direct and sub-dependencies of the target type will get the configured service.
            </summary>
            <typeparam name="TTarget">The type of the parent.</typeparam>
            <param name="name">The optional name of the parent.</param>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WhenInResolutionPathOf(System.Type,System.Object)">
            <summary>
            Sets a resolution path condition for the registration. The service will be selected only in the resolution path of the given target.
            This means that only the direct and sub-dependencies of the target type will get the configured service.
            </summary>
            <param name="targetType">The type of the parent.</param>
            <param name="name">The optional name of the parent.</param>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WhenHas``1(System.Object)">
            <summary>
            Sets an attribute condition for the registration.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WhenHas(System.Type)">
            <summary>
            Sets an attribute condition for the registration.
            </summary>
            <param name="attributeType">The type of the attribute.</param>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WhenResolutionPathHas``1(System.Object)">
            <summary>
            Sets a resolution path condition for the registration. The service will be selected only in the resolution path of the target that has the given attribute.
            This means that only the direct and sub-dependencies of the target type that has the given attribute will get the configured service.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WhenResolutionPathHas(System.Type,System.Object)">
            <summary>
            Sets a resolution path condition for the registration. The service will be selected only in the resolution path of the target that has the given attribute.
            This means that only the direct and sub-dependencies of the target type that has the given attribute will get the configured service.
            </summary>
            <param name="attributeType">The type of the attribute.</param>
            <param name="name">The optional name of the target that has the desired attribute.</param>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.When(System.Func{Stashbox.Resolution.TypeInformation,System.Boolean})">
            <summary>
            Sets a generic condition for the registration.
            </summary>
            <param name="resolutionCondition">The predicate.</param>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WithInjectionParameters(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Sets injection parameters for the registration.
            </summary>
            <param name="injectionParameters">The injection parameters.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WithInjectionParameter(System.String,System.Object)">
            <summary>
            Sets injection parameters for the registration.
            </summary>
            <param name="name">The name of the injection parameter.</param>
            <param name="value">The value of the injection parameter.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WithAutoMemberInjection(Stashbox.Configuration.Rules.AutoMemberInjectionRules,System.Func{System.Reflection.MemberInfo,System.Boolean})">
            <summary>
            Enables auto member injection on the registration.
            </summary>
            <param name="rule">The auto member injection rule.</param>
            <param name="filter">A filter delegate used to determine which members should be auto injected and which are not.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WithConstructorSelectionRule(System.Func{System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo},System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo}})">
            <summary>
            The constructor selection rule.
            </summary>
            <param name="rule">The constructor selection rule.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WithConstructorByArgumentTypes(System.Type[])">
            <summary>
            Sets the selected constructor.
            </summary>
            <param name="argumentTypes">The constructor argument types.</param>
            <returns>The fluent configurator.</returns>
            <exception cref="T:Stashbox.Exceptions.ConstructorNotFoundException" />
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WithConstructorByArguments(System.Object[])">
            <summary>
            Sets the selected constructor.
            </summary>
            <param name="arguments">The constructor arguments.</param>
            <returns>The fluent configurator.</returns>
            <exception cref="T:Stashbox.Exceptions.ConstructorNotFoundException" />
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.WithoutDisposalTracking">
            <summary>
            Tells the container that it shouldn't track the resolved transient object for disposal.
            </summary>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.ReplaceExisting">
            <summary>
            Tells the container that it should replace an existing registration with the current one, or add it if there is no existing found.
            </summary>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.ReplaceOnlyIfExists">
            <summary>
            Tells the container that it should replace an existing registration with the current one, but only if there is an existing registration.
            </summary>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.AsImplementedTypes">
            <summary>
            Registers the given service by all of it's implemented types.
            </summary>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.AsServiceAlso``1">
            <summary>
            Binds the currently configured registration to an additional service type.
            </summary>
            <returns>The configurator itself.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.AsServiceAlso(System.Type)">
            <summary>
            Binds the currently configured registration to an additional service type.
            </summary>
            <param name="serviceType">The additional service type.</param>
            <returns>The configurator itself.</returns>
        </member>
        <member name="T:Stashbox.Registration.Fluent.DecoratorConfigurator`2">
            <summary>
            Represents the fluent service decorator registration api.
            </summary>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator`2.WithDependencyBinding``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Object)">
            <summary>
            Sets a member (property / field) as a dependency that should be filled by the container.
            </summary>
            <param name="expression">The member expression.</param>
            <param name="dependencyName">The name of the dependency.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator`2.WithFinalizer(System.Action{`1})">
            <summary>
            Sets a delegate which will be called when the container is being disposed.
            </summary>
            <param name="finalizer">The cleanup delegate.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator`2.WithInitializer(System.Action{`1,Stashbox.IDependencyResolver})">
            <summary>
            Sets a delegate which will be called when the service is being constructed.
            </summary>
            <param name="initializer">The initializer delegate.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator`2.WithAsyncInitializer(System.Func{`1,Stashbox.IDependencyResolver,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Sets an async initializer delegate which will be called when <see cref="M:Stashbox.IDependencyResolver.InvokeAsyncInitializers(System.Threading.CancellationToken)" /> is called.
            </summary>
            <param name="initializer">The async initializer delegate.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator`2.WithFactory(System.Func{`1},System.Boolean)">
            <summary>
            Sets a parameter-less factory delegate for the registration.
            </summary>
            <param name="factory">The factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator`2.WithFactory(System.Func{Stashbox.IDependencyResolver,`1},System.Boolean)">
            <summary>
            Sets a factory delegate for the registration that takes an <see cref="T:Stashbox.IDependencyResolver" /> as parameter.
            </summary>
            <param name="factory">The factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator`2.WithFactory``1(System.Func{``0,`1},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator`2.WithFactory``2(System.Func{``0,``1,`1},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator`2.WithFactory``3(System.Func{``0,``1,``2,`1},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator`2.WithFactory``4(System.Func{``0,``1,``2,``3,`1},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator`2.WithFactory``5(System.Func{``0,``1,``2,``3,``4,`1},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="T:Stashbox.Registration.Fluent.DecoratorConfigurator">
            <summary>
            Represents the fluent service decorator registration api.
            </summary>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator.WithFactory(System.Func{Stashbox.IDependencyResolver,System.Object},System.Boolean)">
            <summary>
            Sets a container factory delegate for the registration.
            </summary>
            <param name="factory">The container factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator.WithFactory(System.Func{System.Object},System.Boolean)">
            <summary>
            Sets a parameter-less factory delegate for the registration.
            </summary>
            <param name="factory">The factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator.WithFactory``1(System.Func{``0,System.Object},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator.WithFactory``2(System.Func{``0,``1,System.Object},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator.WithFactory``3(System.Func{``0,``1,``2,System.Object},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator.WithFactory``4(System.Func{``0,``1,``2,``3,System.Object},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.DecoratorConfigurator.WithFactory``5(System.Func{``0,``1,``2,``3,``4,System.Object},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="T:Stashbox.Registration.Fluent.FluentServiceConfigurator`3">
            <summary>
            Represents the generic fluent service registration api.
            </summary>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`3.WithDependencyBinding``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Object)">
            <summary>
            Sets a member (property / field) as a dependency that should be filled by the container.
            </summary>
            <param name="expression">The member expression.</param>
            <param name="dependencyName">The name of the dependency.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`3.WithFinalizer(System.Action{`1})">
            <summary>
            Sets a delegate which will be called when the container is being disposed.
            </summary>
            <param name="finalizer">The cleanup delegate.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`3.WithInitializer(System.Action{`1,Stashbox.IDependencyResolver})">
            <summary>
            Sets a delegate which will be called when the service is being constructed.
            </summary>
            <param name="initializer">The initializer delegate.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`3.WithAsyncInitializer(System.Func{`1,Stashbox.IDependencyResolver,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Sets an async initializer delegate which will be called when <see cref="M:Stashbox.IDependencyResolver.InvokeAsyncInitializers(System.Threading.CancellationToken)" /> is called.
            </summary>
            <param name="initializer">The async initializer delegate.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`3.WithFactory(System.Func{`1},System.Boolean)">
            <summary>
            Sets a parameter-less factory delegate for the registration.
            </summary>
            <param name="factory">The factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`3.WithFactory``1(System.Func{``0},System.Boolean)">
            <summary>
            Sets a parameter-less factory delegate for the registration.
            </summary>
            <param name="factory">The factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`3.WithFactory(System.Func{Stashbox.IDependencyResolver,`1},System.Boolean)">
            <summary>
            Sets a factory delegate for the registration that takes an <see cref="T:Stashbox.IDependencyResolver" /> as parameter.
            </summary>
            <param name="factory">The factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`3.WithFactory``1(System.Func{Stashbox.IDependencyResolver,``0},System.Boolean)">
            <summary>
            Sets a factory delegate for the registration that takes an <see cref="T:Stashbox.IDependencyResolver" /> as parameter.
            </summary>
            <param name="factory">The factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`3.WithFactory``1(System.Func{``0,`1},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`3.WithFactory``2(System.Func{``0,``1},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`3.WithFactory``2(System.Func{``0,``1,`1},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`3.WithFactory``3(System.Func{``0,``1,``2,`1},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`3.WithFactory``4(System.Func{``0,``1,``2,``3,`1},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`3.WithFactory``5(System.Func{``0,``1,``2,``3,``4,`1},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="T:Stashbox.Registration.Fluent.FluentServiceConfigurator`1">
            <summary>
            Represents the fluent service registration api.
            </summary>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`1.WithDynamicResolution">
            <summary>
            Indicates that the service's resolution should be handled by a dynamic <see cref="M:Stashbox.IDependencyResolver.Resolve(System.Type)" /> call on the current <see cref="T:Stashbox.IDependencyResolver" /> instead of a pre-built instantiation expression.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`1.WithMetadata(System.Object)">
            <summary>
            Sets the metadata.
            </summary>
            <param name="metadata">The metadata.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`1.WithName(System.Object)">
            <summary>
            Sets the name of the registration.
            </summary>
            <param name="name">The name of the registration.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`1.DefinesScope(System.Object)">
            <summary>
            This registration is used as a logical scope for it's dependencies. Dependencies registered with the <see cref="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.InNamedScope(System.Object)" /> with the same name will be preferred during resolution.
            </summary>
            <param name="scopeName">The name of the scope. When the name is null, the type which defines the scope is used as name.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`1.WithFactory(System.Func{Stashbox.IDependencyResolver,System.Object},System.Boolean)">
            <summary>
            Sets a container factory delegate for the registration.
            </summary>
            <param name="factory">The container factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`1.WithFactory(System.Func{System.Object},System.Boolean)">
            <summary>
            Sets a parameter-less factory delegate for the registration.
            </summary>
            <param name="factory">The factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`1.WithFactory``1(System.Func{``0,System.Object},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`1.WithFactory``2(System.Func{``0,``1,System.Object},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`1.WithFactory``3(System.Func{``0,``1,``2,System.Object},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`1.WithFactory``4(System.Func{``0,``1,``2,``3,System.Object},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.FluentServiceConfigurator`1.WithFactory``5(System.Func{``0,``1,``2,``3,``4,System.Object},System.Boolean)">
            <summary>
            Sets a parameterized factory delegate for the registration.
            </summary>
            <param name="factory">The parameterized factory delegate.</param>
            <param name="isCompiledLambda">Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="T:Stashbox.Registration.Fluent.RegistrationConfigurator`2">
            <summary>
            Represents the generic fluent service registration api.
            </summary>
        </member>
        <member name="M:Stashbox.Registration.Fluent.RegistrationConfigurator`2.WithInstance(`0,System.Boolean)">
            <summary>
            Sets an instance as the resolution target of the registration.
            </summary>
            <param name="instance">The instance.</param>
            <param name="wireUp">If true, the instance will be wired into the container, it will perform member and method injection on it.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="T:Stashbox.Registration.Fluent.RegistrationConfigurator">
            <summary>
            Represents the fluent service registration api.
            </summary>
        </member>
        <member name="M:Stashbox.Registration.Fluent.RegistrationConfigurator.WithInstance(System.Object,System.Boolean)">
            <summary>
            Sets an instance as the resolution target of the registration.
            </summary>
            <param name="instance">The instance.</param>
            <param name="wireUp">If true, the instance will be wired into the container, it will perform member and method injection on it.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="T:Stashbox.Registration.Fluent.UnknownRegistrationConfigurator">
            <summary>
            Represents the fluent service registration api.
            </summary>
        </member>
        <member name="M:Stashbox.Registration.Fluent.UnknownRegistrationConfigurator.SetImplementationType(System.Type)">
            <summary>
            Sets the current registration's implementation type.
            </summary>
            <param name="implementationType">The implementation type.</param>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="M:Stashbox.Registration.Fluent.UnknownRegistrationConfigurator.Skip">
            <summary>
            Marks the current unknown type registration as skipped.
            </summary>
            <returns>The fluent configurator.</returns>
        </member>
        <member name="T:Stashbox.Registration.IDecoratorRepository">
            <summary>
            Represents a decorator registration repository.
            </summary>
        </member>
        <member name="M:Stashbox.Registration.IDecoratorRepository.AddDecorator(System.Type,Stashbox.Registration.ServiceRegistration,System.Boolean)">
            <summary>
            Adds a decorator to the repository.
            </summary>
            <param name="type">The decorated type.</param>
            <param name="serviceRegistration">The decorator registration.</param>
            <param name="remap">If true, all the registrations mapped to a service type will be replaced.</param>
        </member>
        <member name="M:Stashbox.Registration.IDecoratorRepository.GetDecoratorsOrDefault(System.Type,Stashbox.Resolution.TypeInformation,Stashbox.Resolution.ResolutionContext)">
            <summary>
            Gets all decorator registration.
            </summary>
            <param name="implementationTypeToDecorate">The implementation type to decorate.</param>
            <param name="typeInformation">The info about the decorated type.</param>
            <param name="resolutionContext">The resolution context.</param>
            <returns>The decorator registrations if any exists, otherwise null.</returns>
        </member>
        <member name="M:Stashbox.Registration.IDecoratorRepository.GetRegistrationMappings">
            <summary>
            Returns all registration mappings.
            </summary>
            <returns>The registration mappings.</returns>
        </member>
        <member name="T:Stashbox.Registration.IRegistrationRepository">
            <summary>
            Represents a registration repository.
            </summary>
        </member>
        <member name="M:Stashbox.Registration.IRegistrationRepository.AddOrUpdateRegistration(Stashbox.Registration.ServiceRegistration,System.Type)">
            <summary>
            Adds or updates an element in the repository.
            </summary>
            <param name="registration">The registration.</param>
            <param name="serviceType">The service type of the registration. Used as the key for the registration mapping.</param>
            <returns>True when the repository changed, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Registration.IRegistrationRepository.AddOrReMapRegistration(Stashbox.Registration.ServiceRegistration,System.Type)">
            <summary>
            Remaps all the registrations mapped to a service type.
            </summary>
            <param name="registration">The registration.</param>
            <param name="serviceType">The service type of the registration. Used as the key for the registration mapping.</param>
            <returns>True when the repository changed, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Registration.IRegistrationRepository.GetRegistrationOrDefault(Stashbox.Resolution.TypeInformation,Stashbox.Resolution.ResolutionContext)">
            <summary>
            Returns a registration.
            </summary>
            <param name="typeInfo">The type info.</param>
            <param name="resolutionContext">The resolution context.</param>
            <returns>The registration or null, if it doesn't exist.</returns>
        </member>
        <member name="M:Stashbox.Registration.IRegistrationRepository.GetRegistrationsOrDefault(Stashbox.Resolution.TypeInformation,Stashbox.Resolution.ResolutionContext)">
            <summary>
            Returns all registrations for a type.
            </summary>
            <param name="typeInfo">The requested type.</param>
            <param name="resolutionContext">The resolution context.</param>
            <returns>The registrations or null, if it doesn't exist.</returns>
        </member>
        <member name="M:Stashbox.Registration.IRegistrationRepository.GetRegistrationMappings">
            <summary>
            Returns all registration mappings.
            </summary>
            <returns>The registration mappings.</returns>
        </member>
        <member name="M:Stashbox.Registration.IRegistrationRepository.ContainsRegistration(System.Type,System.Object,System.Boolean)">
            <summary>
            Checks whether a type is registered in the repository.
            </summary>
            <param name="type">The requested type.</param>
            <param name="name">The requested name.</param>
            <param name="includeOpenGenerics">Determines whether open generic registrations should be taken into account when the given type is closed generic.</param>
            <returns>True if the registration found, otherwise false.</returns>
        </member>
        <member name="T:Stashbox.Registration.OpenGenericRegistration">
            <summary>
            Describes an open-generic service registration.
            </summary>
        </member>
        <member name="T:Stashbox.Registration.RegistrationDiagnosticsInfo">
            <summary>
            Details about a registration.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationDiagnosticsInfo.ServiceType">
            <summary>
            The service type.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationDiagnosticsInfo.ImplementationType">
            <summary>
            The implementation type.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationDiagnosticsInfo.Name">
            <summary>
            The registration name.
            </summary>
        </member>
        <member name="M:Stashbox.Registration.RegistrationDiagnosticsInfo.#ctor(System.Type,System.Type,System.Object)">
            <summary>
            Constructs a <see cref="T:Stashbox.Registration.RegistrationDiagnosticsInfo" />.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="implementationType">The implementation type.</param>
            <param name="name">The registration name.</param>
        </member>
        <member name="M:Stashbox.Registration.RegistrationDiagnosticsInfo.ToString">
            <summary>
            The string representation of the registration.
            </summary>
            <returns>The string representation of the registration.</returns>
        </member>
        <member name="T:Stashbox.Registration.ServiceRegistration">
            <summary>
            Represents a service registration.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.ServiceRegistration.RegistrationId">
            <summary>
            The registration id.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.ServiceRegistration.IsDecorator">
            <summary>
            True if the registration is a decorator.
            </summary>
        </member>
        <member name="P:Stashbox.Registration.ServiceRegistration.Name">
            <summary>
            Name of the registration.
            </summary>
        </member>
        <member name="P:Stashbox.Registration.ServiceRegistration.Lifetime">
            <summary>
            Lifetime of the registration.
            </summary>
        </member>
        <member name="P:Stashbox.Registration.ServiceRegistration.RegistrationOrder">
            <summary>
            The registration order indicator.
            </summary>
        </member>
        <member name="P:Stashbox.Registration.ServiceRegistration.ImplementationType">
            <summary>
            The implementation type.
            </summary>
        </member>
        <member name="P:Stashbox.Registration.ServiceRegistration.RegistrationOptions">
            <summary>
            Advanced registration options.
            </summary>
        </member>
        <member name="T:Stashbox.Registration.RegistrationOption">
            <summary>
            Represents the registration option types.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationOption.IsResolutionCallRequired">
            <summary>
            Determines whether the service's resolution should be handled by a dynamic <see cref="M:Stashbox.IDependencyResolver.Resolve(System.Type)" /> call on the current <see cref="T:Stashbox.IDependencyResolver" /> instead of a pre-built instantiation expression.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationOption.ConstructorOptions">
            <summary>
            Constructor related registration options.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationOption.AutoMemberOptions">
            <summary>
            Auto member injection related registration options.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationOption.DependencyBindings">
            <summary>
            Dependency names or types that are bound to named registrations.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationOption.Finalizer">
            <summary>
            The cleanup delegate.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationOption.Initializer">
            <summary>
            The initializer delegate.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationOption.AsyncInitializer">
            <summary>
            The async initializer delegate.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationOption.IsLifetimeExternallyOwned">
            <summary>
            True if the lifetime of the service is owned externally.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationOption.DefinedScopeName">
            <summary>
            The name of the scope this registration defines.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationOption.ConstructorSelectionRule">
            <summary>
            The constructor selection rule.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationOption.Metadata">
            <summary>
            The additional metadata.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationOption.ReplaceExistingRegistration">
            <summary>
            Indicates whether this registration should replace an existing registration.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationOption.ReplaceExistingRegistrationOnlyIfExists">
            <summary>
            Indicates whether this registration should replace a registration only when it's exist.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationOption.AdditionalServiceTypes">
            <summary>
            Additional service types to map.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationOption.InjectionParameters">
            <summary>
            Injection parameters.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationOption.ConditionOptions">
            <summary>
            Condition related registration options.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.RegistrationOption.RegistrationTypeOptions">
            <summary>
            Options related to instance or factory registrations.
            </summary>
        </member>
        <member name="T:Stashbox.Registration.FactoryOptions">
            <summary>
            Represents the factory registration options.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.FactoryOptions.Factory">
            <summary>
            Container factory of the registration.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.FactoryOptions.FactoryParameters">
            <summary>
            Parameters to inject for the factory registration.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.FactoryOptions.IsFactoryDelegateACompiledLambda">
            <summary>
            Flag that indicates the passed factory delegate is a compiled lambda from <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
        </member>
        <member name="T:Stashbox.Registration.InstanceOptions">
            <summary>
            Represents the instance registration options.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.InstanceOptions.IsWireUp">
            <summary>
            If true, the existing instance will be wired into the container, it will perform member and method injection on it.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.InstanceOptions.ExistingInstance">
            <summary>
            The already stored instance which was provided by instance or wired up registration.
            </summary>
        </member>
        <member name="T:Stashbox.Registration.AutoMemberOptions">
            <summary>
            Represents the auto member injection related registration options.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.AutoMemberOptions.AutoMemberInjectionRule">
            <summary>
            The auto member injection rule for the registration.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.AutoMemberOptions.AutoMemberInjectionFilter">
            <summary>
            A filter delegate used to determine which members should be auto injected and which are not.
            </summary>
        </member>
        <member name="T:Stashbox.Registration.ConstructorOptions">
            <summary>
            Represents the constructor related registration options.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.ConstructorOptions.SelectedConstructor">
            <summary>
            The selected constructor if any was set.
            </summary>
        </member>
        <member name="F:Stashbox.Registration.ConstructorOptions.ConstructorArguments">
            <summary>
            The arguments of the selected constructor if any was set.
            </summary>
        </member>
        <member name="T:Stashbox.CollectionRegistratorExtensions">
            <summary>
            Represents the extension methods of <see cref="T:Stashbox.IDependencyCollectionRegistrator" />.
            </summary>
        </member>
        <member name="M:Stashbox.CollectionRegistratorExtensions.RegisterTypesAs``1(Stashbox.IDependencyCollectionRegistrator,System.Collections.Generic.IEnumerable{System.Type},System.Func{System.Type,System.Boolean},System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers a collection of types mapped to a service type.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <param name="registrator">The registrator.</param>
            <param name="types">Types to register.</param>
            <param name="selector">The type selector. Used to filter which types should be excluded/included in the registration process.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.CollectionRegistratorExtensions.RegisterTypesAs``1(Stashbox.IDependencyCollectionRegistrator,System.Reflection.Assembly,System.Func{System.Type,System.Boolean},System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers a collection of types mapped to a service type.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <param name="registrator">The registrator.</param>
            <param name="assembly">Assembly to register.</param>
            <param name="selector">The type selector. Used to filter which types should be excluded/included in the registration process.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.CollectionRegistratorExtensions.RegisterTypesAs(Stashbox.IDependencyCollectionRegistrator,System.Type,System.Reflection.Assembly,System.Func{System.Type,System.Boolean},System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers a collection of types mapped to a service type.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="registrator">The registrator.</param>
            <param name="assembly">Assembly to register.</param>
            <param name="selector">The type selector. Used to filter which types should be excluded/included in the registration process.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.CollectionRegistratorExtensions.RegisterAssembly(Stashbox.IDependencyCollectionRegistrator,System.Reflection.Assembly,System.Func{System.Type,System.Boolean},System.Func{System.Type,System.Type,System.Boolean},System.Boolean,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers types from an assembly.
            </summary>
            <param name="registrator">The registrator.</param>
            <param name="assembly">The assembly containing the types to register.</param>
            <param name="selector">The type selector. Used to filter which types should be excluded/included in the registration process.</param>
            <param name="serviceTypeSelector">The service type selector. Used to filter which interface or base types the implementation should be mapped to.</param>
            <param name="registerSelf">If it's true the types will be registered to their own type too.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.CollectionRegistratorExtensions.RegisterAssemblies(Stashbox.IDependencyCollectionRegistrator,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Func{System.Type,System.Boolean},System.Func{System.Type,System.Type,System.Boolean},System.Boolean,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers types from an assembly collection.
            </summary>
            <param name="registrator">The registrator.</param>
            <param name="assemblies">The assemblies holding the types to register.</param>
            <param name="selector">The type selector. Used to filter which types should be excluded/included in the registration process.</param>
            <param name="serviceTypeSelector">The service type selector. Used to filter which interface or base types the implementation should be mapped to.</param>
            <param name="registerSelf">If it's true the types will be registered to their own type too.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.CollectionRegistratorExtensions.RegisterAssemblyContaining``1(Stashbox.IDependencyCollectionRegistrator,System.Func{System.Type,System.Boolean},System.Func{System.Type,System.Type,System.Boolean},System.Boolean,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers types from an assembly that contains the given service type.
            </summary>
            <typeparam name="TFrom">The service type the assembly contains.</typeparam>
            <param name="registrator">The registrator.</param>
            <param name="selector">The type selector. Used to filter which types should be excluded/included in the registration process.</param>
            <param name="serviceTypeSelector">The service type selector. Used to filter which interface or base types the implementation should be mapped to.</param>
            <param name="registerSelf">If it's true the types will be registered to their own type too.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.CollectionRegistratorExtensions.RegisterAssemblyContaining(Stashbox.IDependencyCollectionRegistrator,System.Type,System.Func{System.Type,System.Boolean},System.Func{System.Type,System.Type,System.Boolean},System.Boolean,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers types from an assembly that contains the given service type.
            </summary>
            <param name="registrator">The registrator.</param>
            <param name="typeFrom">The type the assembly contains.</param>
            <param name="selector">The type selector. Used to filter which types should be excluded/included in the registration process.</param>
            <param name="serviceTypeSelector">The service type selector. Used to filter which interface or base types the implementation should be mapped to.</param>
            <param name="registerSelf">If it's true the types will be registered to their own type too.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.CollectionRegistratorExtensions.ComposeAssemblies(Stashbox.IDependencyCollectionRegistrator,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Func{System.Type,System.Boolean})">
            <summary>
            Scans the given assemblies for <see cref="T:Stashbox.ICompositionRoot" /> implementations and invokes their <see cref="M:Stashbox.ICompositionRoot.Compose(Stashbox.IStashboxContainer)" /> method.
            </summary>
            <param name="registrator">The registrator.</param>
            <param name="assemblies">The assemblies to scan.</param>
            <param name="selector">The type selector. Used to filter which types should be excluded/included in the registration process.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.CollectionRegistratorExtensions.ComposeBy``1(Stashbox.IDependencyCollectionRegistrator,System.Object[])">
            <summary>
            Composes services by calling the <see cref="M:Stashbox.ICompositionRoot.Compose(Stashbox.IStashboxContainer)" /> method of the given root.
            </summary>
            <typeparam name="TCompositionRoot">The type of an <see cref="T:Stashbox.ICompositionRoot" /> implementation.</typeparam>
            <param name="registrator">The registrator.</param>
            <param name="compositionRootArguments">Optional composition root constructor arguments.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.CollectionRegistratorExtensions.ComposeAssembly(Stashbox.IDependencyCollectionRegistrator,System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
            Scans the given assembly for <see cref="T:Stashbox.ICompositionRoot" /> implementations and invokes their <see cref="M:Stashbox.ICompositionRoot.Compose(Stashbox.IStashboxContainer)" /> method.
            </summary>
            <param name="registrator">The registrator.</param>
            <param name="assembly">The assembly to scan.</param>
            <param name="selector">The type selector. Used to filter which types should be excluded/included in the registration process.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="T:Stashbox.DependencyRegistratorExtensions">
            <summary>
            Represents the extension methods of <see cref="T:Stashbox.IDependencyRegistrator" />.
            </summary>
        </member>
        <member name="M:Stashbox.DependencyRegistratorExtensions.RegisterInstances``1(Stashbox.IDependencyRegistrator,System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Registers instances that are already constructed.
            </summary>
            <param name="registrator">The dependency registrator.</param>
            <param name="instances">The collection of the constructed instances.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from the disposal tracking.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.DependencyRegistratorExtensions.RegisterInstances``1(Stashbox.IDependencyRegistrator,``0[])">
            <summary>
            Registers instances that are already constructed.
            </summary>
            <param name="registrator">The dependency registrator.</param>
            <param name="instances">The collection of the constructed instances.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="T:Stashbox.DependencyReMapperExtensions">
            <summary>
            Represents the extension methods of <see cref="T:Stashbox.IDependencyReMapper" />.
            </summary>
        </member>
        <member name="M:Stashbox.DependencyReMapperExtensions.ReMap(Stashbox.IDependencyReMapper,System.Type,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Re-maps an existing registration.
            </summary>
            <param name="reMapper">The re-mapper.</param>
            <param name="typeTo">The service/implementation type.</param>
            <param name="configurator">The configurator for the registered type.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="T:Stashbox.ResolutionScope" />
        <member name="M:Stashbox.ResolutionScope.InvokeAsyncInitializers(System.Threading.CancellationToken)">
            <summary>
            Calls the registered asynchronous initializers of all resolved objects.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>The initializer task.</returns>
        </member>
        <member name="M:Stashbox.ResolutionScope.Resolve(System.Type)">
            <summary>
            Resolves an instance from the container.
            </summary>
            <param name="typeFrom">The type of the requested service.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.ResolutionScope.Resolve(System.Type,System.Object,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves a named instance from the container with dependency overrides.
            </summary>
            <param name="typeFrom">The type of the requested service.</param>
            <param name="name">The name of the requested service.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.ResolutionScope.ResolveOrDefault(System.Type)">
            <summary>
            Resolves an instance from the container or returns default if the type is not resolvable.
            </summary>
            <param name="typeFrom">The type of the requested service.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.ResolutionScope.ResolveOrDefault(System.Type,System.Object,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves an instance from the container with dependency overrides or returns default if the type is not resolvable.
            </summary>
            <param name="typeFrom">The type of the requested service.</param>
            <param name="name">The name of the requested service.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.ResolutionScope.GetService(System.Type)" />
        <member name="M:Stashbox.ResolutionScope.ResolveFactory(System.Type,System.Object,Stashbox.Resolution.ResolutionBehavior,System.Type[])">
            <summary>
            Returns a factory delegate that can be used to activate the service.
            </summary>
            <param name="typeFrom">The type of the requested instances.</param>
            <param name="name">The name of the requested registration.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <param name="parameterTypes">The parameter type.</param>
            <returns>The factory delegate.</returns>
        </member>
        <member name="M:Stashbox.ResolutionScope.ResolveFactoryOrDefault(System.Type,System.Object,Stashbox.Resolution.ResolutionBehavior,System.Type[])">
            <summary>
            Returns a factory delegate that can be used to activate the service or returns default if the type is not resolvable.
            </summary>
            <param name="typeFrom">The type of the requested instances.</param>
            <param name="name">The name of the requested registration.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <param name="parameterTypes">The parameter type.</param>
            <returns>The factory delegate.</returns>
        </member>
        <member name="M:Stashbox.ResolutionScope.BuildUp``1(``0,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Builds up an existing instance. This means the container performs member and method injections on it without registering it into the container.
            </summary>
            <typeparam name="TTo">The type of the requested instance.</typeparam>
            <param name="instance">The instance to build up.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The built object.</returns>
        </member>
        <member name="M:Stashbox.ResolutionScope.Activate(System.Type,Stashbox.Resolution.ResolutionBehavior,System.Object[])">
            <summary>
            Activates an object without registering it into the container. If you want to resolve a
            registered service use the <see cref="M:Stashbox.IDependencyResolver.Resolve(System.Type)" /> method instead.
            </summary>
            <param name="type">The type to activate.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <param name="arguments">Optional dependency overrides.</param>
            <returns>The built object.</returns>
        </member>
        <member name="M:Stashbox.ResolutionScope.CanResolve(System.Type,System.Object,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Checks whether a type can be resolved by the container, or not.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="name">The registration name.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>True if the service can be resolved, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.ResolutionScope.BeginScope(System.Object,System.Boolean)">
            <summary>
            Creates a new scope.
            </summary>
            <param name="name">The name of the scope.</param>
            <param name="attachToParent">If true, the new scope will be attached to the lifecycle of its parent scope. When the parent is being disposed, the new scope will be disposed with it.</param>
            <returns>The created scope.</returns>
        </member>
        <member name="M:Stashbox.ResolutionScope.PutInstanceInScope(System.Type,System.Object,System.Boolean,System.Object)">
            <summary>
            Puts an instance into the scope. The instance will be disposed along with the scope disposal.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="instance">The instance.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from disposal tracking.</param>
            <param name="name">The dependency name of the instance.</param>
            <returns>The scope.</returns>
        </member>
        <member name="M:Stashbox.ResolutionScope.GetDelegateCacheEntries">
            <summary>
            Returns all cached service resolution delegates.
            </summary>
            <returns>The service resolution delegates.</returns>
        </member>
        <member name="T:Stashbox.Resolution.DelegateCacheEntry">
            <summary>
            Details about Stashbox's internal delegate cache state.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.DelegateCacheEntry.ServiceType">
            <summary>
            The service type.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.DelegateCacheEntry.ResolutionBehavior">
            <summary>
            The resolution behavior that was used to construct this cache entry.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.DelegateCacheEntry.CachedDelegate">
            <summary>
            The cached resolution delegate.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.DelegateCacheEntry.NamedCacheEntries">
            <summary>
            Named resolution delegates cached for this service.
            </summary>
        </member>
        <member name="M:Stashbox.Resolution.DelegateCacheEntry.#ctor(System.Type,System.Func{Stashbox.IResolutionScope,Stashbox.Resolution.IRequestContext,System.Object},System.Collections.Generic.IEnumerable{Stashbox.Resolution.NamedCacheEntry},Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Constructs a <see cref="T:Stashbox.Resolution.DelegateCacheEntry" />.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="cachedDelegate">The cached resolution delegate.</param>
            <param name="namedCacheEntries">Named resolution delegates cached for this service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
        </member>
        <member name="T:Stashbox.Resolution.NamedCacheEntry">
            <summary>
            Details about a named delegate cache entry.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.NamedCacheEntry.Name">
            <summary>
            The service name.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.NamedCacheEntry.CachedDelegate">
            <summary>
            The cached resolution delegate.
            </summary>
        </member>
        <member name="M:Stashbox.Resolution.NamedCacheEntry.#ctor(System.Object,System.Func{Stashbox.IResolutionScope,Stashbox.Resolution.IRequestContext,System.Object})">
            <summary>
            Constructs a <see cref="T:Stashbox.Resolution.NamedCacheEntry" />.
            </summary>
            <param name="name">The service name.</param>
            <param name="cachedDelegate">The cached resolution delegate.</param>
        </member>
        <member name="T:Stashbox.Resolution.IRequestContext">
            <summary>
            Represents an information storage for resolution requests.
            </summary>
        </member>
        <member name="M:Stashbox.Resolution.IRequestContext.GetDependencyOverrideOrDefault(System.Type)">
            <summary>
            Returns a dependency override for a given type.
            </summary>
            <param name="dependencyType">The type of the dependency override.</param>
            <returns>The object used for override a dependency.</returns>
        </member>
        <member name="M:Stashbox.Resolution.IRequestContext.GetDependencyOverrideOrDefault``1">
            <summary>
            Returns a dependency override for a given type.
            </summary>
            <typeparam name="TResult">The type of the dependency override.</typeparam>
            <returns>The object used for override a dependency.</returns>
        </member>
        <member name="M:Stashbox.Resolution.IRequestContext.GetOverrides">
            <summary>
            Returns each dependency override passed to the resolution request.
            </summary>
        </member>
        <member name="M:Stashbox.Resolution.IRequestContext.ExcludeFromTracking``1(``0)">
            <summary>
            Marks an instance as non disposable, so the container will exclude it from dispose tracking.
            </summary>
            <param name="value">The instance to mark.</param>
            <returns>The instance.</returns>
        </member>
        <member name="T:Stashbox.Resolution.IResolutionStrategy">
            <summary>
            Represents a resolution strategy.
            </summary>
        </member>
        <member name="M:Stashbox.Resolution.IResolutionStrategy.RegisterResolver(Stashbox.Resolution.IResolver)">
            <summary>
            Registers an <see cref="T:Stashbox.Resolution.IResolver" />.
            </summary>
            <param name="resolver">The resolver implementation.</param>
        </member>
        <member name="M:Stashbox.Resolution.IResolutionStrategy.BuildExpressionForType(Stashbox.Resolution.ResolutionContext,Stashbox.Resolution.TypeInformation)">
            <summary>
            Builds the resolution expression for the requested service.
            </summary>
            <param name="resolutionContext">The resolution context.</param>
            <param name="typeInformation">The type info of the requested service.</param>
            <returns>The built expression tree.</returns>
        </member>
        <member name="M:Stashbox.Resolution.IResolutionStrategy.BuildExpressionsForEnumerableRequest(Stashbox.Resolution.ResolutionContext,Stashbox.Resolution.TypeInformation)">
            <summary>
            Builds all the resolution expressions for the enumerable service request.
            </summary>
            <param name="resolutionContext">The resolution context.</param>
            <param name="typeInformation">The type info of the requested service.</param>
            <returns>The built expression tree.</returns>
        </member>
        <member name="M:Stashbox.Resolution.IResolutionStrategy.BuildExpressionForRegistration(Stashbox.Registration.ServiceRegistration,Stashbox.Resolution.ResolutionContext,Stashbox.Resolution.TypeInformation)">
            <summary>
            Builds the resolution expression for the requested service registration.
            </summary>
            <param name="serviceRegistration">The service registration.</param>
            <param name="resolutionContext">The resolution context.</param>
            <param name="typeInformation">The type info of the requested service.</param>
            <returns>The built expression tree.</returns>
        </member>
        <member name="M:Stashbox.Resolution.IResolutionStrategy.IsTypeResolvable(Stashbox.Resolution.ResolutionContext,Stashbox.Resolution.TypeInformation)">
            <summary>
            Determines whether a type is resolvable with the current container state or not.
            </summary>
            <param name="resolutionContext">The resolution context.</param>
            <param name="typeInformation">The type info of the requested service.</param>
            <returns>True if a type is resolvable, otherwise false.</returns>
        </member>
        <member name="T:Stashbox.Resolution.IResolver">
            <summary>
            The base interface for wrappers and resolvers.
            </summary>
        </member>
        <member name="T:Stashbox.Resolution.IServiceResolver">
            <summary>
            Represents a dependency resolver.
            </summary>
        </member>
        <member name="M:Stashbox.Resolution.IServiceResolver.GetExpression(Stashbox.Resolution.IResolutionStrategy,Stashbox.Resolution.TypeInformation,Stashbox.Resolution.ResolutionContext)">
            <summary>
            Produces an expression for creating an instance.
            </summary>
            <param name="resolutionStrategy">The resolution strategy used to build the underlying resolution expression tree.</param>
            <param name="typeInfo">The information about the type to resolve.</param>
            <param name="resolutionContext">The contextual information about the current resolution call.</param>
            <returns>The built resolution expression.</returns>
        </member>
        <member name="M:Stashbox.Resolution.IServiceResolver.CanUseForResolution(Stashbox.Resolution.TypeInformation,Stashbox.Resolution.ResolutionContext)">
            <summary>
            Returns true, if the resolver can be used to activate the requested service, otherwise false.
            </summary>
            <param name="typeInfo">The information about the type to resolve.</param>
            <param name="resolutionContext">The contextual information about the current resolution call.</param>
            <returns>Returns true, if the resolver can be used to activate the requested service, otherwise false.</returns>
        </member>
        <member name="T:Stashbox.Resolution.IEnumerableSupportedResolver">
            <summary>
            Represents a dependency resolver that can produce a collection of services.
            </summary>
        </member>
        <member name="M:Stashbox.Resolution.IEnumerableSupportedResolver.GetExpressionsForEnumerableRequest(Stashbox.Resolution.IResolutionStrategy,Stashbox.Resolution.TypeInformation,Stashbox.Resolution.ResolutionContext)">
            <summary>
            Produces an array of expressions, one for every registered service identified by the requested type.
            </summary>
            <param name="resolutionStrategy">The resolution strategy used to build the underlying resolution expression tree.</param>
            <param name="typeInfo">The information about the type to resolve.</param>
            <param name="resolutionContext">The contextual information about the current resolution call.</param>
            <returns>The array of all the resolution expression built by the resolver.</returns>
        </member>
        <member name="T:Stashbox.Resolution.IServiceWrapper">
            <summary>
            Represents a wrapper that can wrap a service.
            </summary>
        </member>
        <member name="M:Stashbox.Resolution.IServiceWrapper.WrapExpression(Stashbox.Resolution.TypeInformation,Stashbox.Resolution.TypeInformation,Stashbox.Resolution.ServiceContext)">
            <summary>
            Wraps the expression that describes the service.
            </summary>
            <param name="originalTypeInformation">The requested type's meta information.</param>
            <param name="wrappedTypeInformation">The wrapped type's meta information.</param>
            <param name="serviceContext">The wrapped service's context that contains the actual instantiation expression and additional meta information.</param>
            <returns>The wrapped service expression.</returns>
        </member>
        <member name="M:Stashbox.Resolution.IServiceWrapper.TryUnWrap(Stashbox.Resolution.TypeInformation,Stashbox.Resolution.TypeInformation@)">
            <summary>
            Un-wraps the underlying service type from a wrapped type request.
            </summary>
            <param name="typeInformation">The requested type's meta information.</param>
            <param name="unWrappedType">The un-wrapped service type.</param>
            <returns>True if the un-wrapping was successful, otherwise false.</returns>
        </member>
        <member name="T:Stashbox.Resolution.IEnumerableWrapper">
            <summary>
            Represents a wrapper that can wrap a collection of a service.
            </summary>
        </member>
        <member name="M:Stashbox.Resolution.IEnumerableWrapper.WrapExpression(Stashbox.Resolution.TypeInformation,Stashbox.Resolution.TypeInformation,System.Collections.Generic.IEnumerable{Stashbox.Resolution.ServiceContext})">
            <summary>
            Wraps the expression that describes the service.
            </summary>
            <param name="originalTypeInformation">The requested type's meta information.</param>
            <param name="wrappedTypeInformation">The wrapped type's meta information.</param>
            <param name="serviceContexts">The service contexts that contains the actual instantiation expressions and additional meta information.</param>
            <returns>The wrapped service expression.</returns>
        </member>
        <member name="M:Stashbox.Resolution.IEnumerableWrapper.TryUnWrap(Stashbox.Resolution.TypeInformation,Stashbox.Resolution.TypeInformation@)">
            <summary>
            Un-wraps the underlying service type from a wrapped type request.
            </summary>
            <param name="typeInformation">The requested type's meta information.</param>
            <param name="unWrappedType">The un-wrapped service type.</param>
            <returns>True if the un-wrapping was successful, otherwise false.</returns>
        </member>
        <member name="T:Stashbox.Resolution.IParameterizedWrapper">
            <summary>
            Represents a wrapper that can wrap a service with function parameters.
            </summary>
        </member>
        <member name="M:Stashbox.Resolution.IParameterizedWrapper.WrapExpression(Stashbox.Resolution.TypeInformation,Stashbox.Resolution.TypeInformation,Stashbox.Resolution.ServiceContext,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Wraps the expression that describes the service.
            </summary>
            <param name="originalTypeInformation">The requested type's meta information.</param>
            <param name="wrappedTypeInformation">The wrapped type's meta information.</param>
            <param name="serviceContext">The wrapped service's context that contains the actual instantiation expression and additional meta information.</param>
            <param name="parameterExpressions">The wrapper's parameter expressions.</param>
            <returns>The wrapped service expression.</returns>
        </member>
        <member name="M:Stashbox.Resolution.IParameterizedWrapper.TryUnWrap(Stashbox.Resolution.TypeInformation,Stashbox.Resolution.TypeInformation@,System.Collections.Generic.IEnumerable{System.Type}@)">
            <summary>
            Un-wraps the underlying service type from a wrapped type request.
            </summary>
            <param name="typeInformation">The requested type's meta information.</param>
            <param name="unWrappedType">The un-wrapped service type.</param>
            <param name="parameterTypes">The wrapper's parameter types.</param>
            <returns>True if the un-wrapping was successful, otherwise false.</returns>
        </member>
        <member name="T:Stashbox.Resolution.ResolutionBehavior">
            <summary>
            Service resolution behavior.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.ResolutionBehavior.Default">
            <summary>
            Indicates that both the parents and the current (which initiated the resolution request) container can participate in the resolution request's service selection.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.ResolutionBehavior.Parent">
            <summary>
            Indicates that parent containers (including indirect all ancestors) can participate in the resolution request's service selection.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.ResolutionBehavior.Current">
            <summary>
            Indicates that the current container (which initiated the resolution request) can participate in the service selection.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.ResolutionBehavior.ParentDependency">
            <summary>
            Indicates that parent containers (including indirect all ancestors) can only provide dependencies for services that are already selected for resolution.
            </summary>
        </member>
        <member name="T:Stashbox.Resolution.ResolutionContext">
            <summary>
            Represents information about the actual resolution flow.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.ResolutionContext.NullResultAllowed">
            <summary>
            True if null result is allowed, otherwise false.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.ResolutionContext.IsRequestedFromRoot">
            <summary>
            When it's true, it indicates that the current resolution request was made from the root scope.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.ResolutionContext.RequestContextParameter">
            <summary>
            The currently resolving scope.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.ResolutionContext.CurrentScopeParameter">
            <summary>
            The currently resolving scope.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.ResolutionContext.CurrentContainerContext">
            <summary>
            The context of the current container instance.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.ResolutionContext.ResolutionBehavior">
            <summary>
            The resolution behavior.
            </summary>
        </member>
        <member name="M:Stashbox.Resolution.ResolutionContext.AddInstruction(System.Linq.Expressions.Expression)">
            <summary>
            Adds a custom expression to the instruction list
            </summary>
            <param name="instruction">The custom expression.</param>
        </member>
        <member name="M:Stashbox.Resolution.ResolutionContext.AddDefinedVariable(System.Int32,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Adds a global keyed variable to the compiled expression tree.
            </summary>
            <param name="key">The key of the variable.</param>
            <param name="parameter">The variable.</param>
        </member>
        <member name="M:Stashbox.Resolution.ResolutionContext.AddDefinedVariable(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Adds a global variable to the compiled expression tree.
            </summary>
            <param name="parameter">The variable.</param>
        </member>
        <member name="T:Stashbox.Resolution.ServiceContext">
            <summary>
            Represents the context of a service.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.ServiceContext.ServiceExpression">
            <summary>
            The expression that describes the instantiation of the service.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.ServiceContext.ServiceRegistration">
            <summary>
            The registration of the service.
            </summary>
        </member>
        <member name="M:Stashbox.Resolution.ServiceContext.#ctor(System.Linq.Expressions.Expression,Stashbox.Registration.ServiceRegistration)">
            <summary>
            Constructs a <see cref="T:Stashbox.Resolution.ServiceContext" />.
            </summary>
            <param name="serviceExpression">The expression that describes the instantiation of the service.</param>
            <param name="serviceRegistration">The registration of the service.</param>
        </member>
        <member name="T:Stashbox.Resolution.TypeInformation">
            <summary>
            Represents type information about a dependency.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.TypeInformation.Type">
            <summary>
            The reflected type of the dependency.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.TypeInformation.DependencyName">
            <summary>
            The name of the dependency.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.TypeInformation.MetadataType">
            <summary>
            The type of the metadata.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.TypeInformation.ParentType">
            <summary>
            The reflected type of the parent of the dependency.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.TypeInformation.CustomAttributes">
            <summary>
            Custom attributes of the dependency.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.TypeInformation.ParameterOrMemberName">
            <summary>
            If the dependency is a method or a constructor parameter, this property holds the parameter name, if it's a class member then the member name.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.TypeInformation.HasDefaultValue">
            <summary>
            It's true if the dependency has default value.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.TypeInformation.DefaultValue">
            <summary>
            The default value of the dependency.
            </summary>
        </member>
        <member name="F:Stashbox.Resolution.TypeInformation.Parent">
            <summary>
            The parent type's metadata.
            </summary>
        </member>
        <member name="M:Stashbox.Resolution.TypeInformation.Clone(System.Type,System.Object,System.Type)">
            <summary>
            Clones the type information with different type.
            </summary>
            <param name="type">The type.</param>
            <param name="dependencyName">The dependency name.</param>
            <param name="metadataType">The metadata type.</param>
            <returns>The cloned type information.</returns>
        </member>
        <member name="T:Stashbox.DependencyResolverExtensions">
            <summary>
            Represents the extensions of the <see cref="T:Stashbox.IDependencyResolver" />.
            </summary>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.Resolve``1(Stashbox.IDependencyResolver)">
            <summary>
            Resolves an instance from the container.
            </summary>
            <typeparam name="TKey">The type of the requested instance.</typeparam>
            <param name="resolver">The dependency resolver.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.Resolve``1(Stashbox.IDependencyResolver,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves an instance from the container.
            </summary>
            <typeparam name="TKey">The type of the requested instance.</typeparam>
            <param name="resolver">The dependency resolver.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.Resolve``1(Stashbox.IDependencyResolver,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves an instance from the container with dependency overrides.
            </summary>
            <typeparam name="TKey">The type of the requested instance.</typeparam>
            <param name="resolver">The dependency resolver.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.Resolve``1(Stashbox.IDependencyResolver,System.Object,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves a named instance from the container.
            </summary>
            <typeparam name="TKey">The type of the requested instance.</typeparam>
            <param name="resolver">The dependency resolver.</param>
            <param name="name">The name of the requested registration.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.Resolve``1(Stashbox.IDependencyResolver,System.Object,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves a named instance from the container with dependency overrides.
            </summary>
            <typeparam name="TKey">The type of the requested instance.</typeparam>
            <param name="resolver">The dependency resolver.</param>
            <param name="name">The name of the requested registration.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.Resolve(Stashbox.IDependencyResolver,System.Type,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves an instance from the container.
            </summary>
            <param name="resolver">The dependency resolver.</param>
            <param name="typeFrom">The type of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.Resolve(Stashbox.IDependencyResolver,System.Type,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves an instance from the container with dependency overrides.
            </summary>
            <param name="resolver">The dependency resolver.</param>
            <param name="typeFrom">The type of the requested service.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.Resolve(Stashbox.IDependencyResolver,System.Type,System.Object,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves a named instance from the container.
            </summary>
            <param name="resolver">The dependency resolver.</param>
            <param name="typeFrom">The type of the requested service.</param>
            <param name="name">The name of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveOrDefault``1(Stashbox.IDependencyResolver,System.Object,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves a named instance from the container or returns default if the type is not resolvable.
            </summary>
            <typeparam name="TKey">The type of the requested instance.</typeparam>
            <param name="resolver">The dependency resolver.</param>
            <param name="name">The name of the requested registration.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveOrDefault``1(Stashbox.IDependencyResolver,System.Object,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves a named instance from the container with dependency overrides or returns default if the type is not resolvable.
            </summary>
            <typeparam name="TKey">The type of the requested instance.</typeparam>
            <param name="resolver">The dependency resolver.</param>
            <param name="name">The name of the requested registration.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveOrDefault``1(Stashbox.IDependencyResolver)">
            <summary>
            Resolves an instance from the container or returns default if the type is not resolvable.
            </summary>
            <typeparam name="TKey">The type of the requested instance.</typeparam>
            <param name="resolver">The dependency resolver.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveOrDefault``1(Stashbox.IDependencyResolver,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves an instance from the container or returns default if the type is not resolvable.
            </summary>
            <typeparam name="TKey">The type of the requested instance.</typeparam>
            <param name="resolver">The dependency resolver.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveOrDefault``1(Stashbox.IDependencyResolver,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves an instance from the container with dependency overrides or returns default if the type is not resolvable.
            </summary>
            <typeparam name="TKey">The type of the requested instance.</typeparam>
            <param name="resolver">The dependency resolver.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveOrDefault(Stashbox.IDependencyResolver,System.Type,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves an instance from the container or returns default if the type is not resolvable.
            </summary>
            <param name="resolver">The dependency resolver.</param>
            <param name="typeFrom">The type of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveOrDefault(Stashbox.IDependencyResolver,System.Type,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves an instance from the container with dependency overrides or returns default if the type is not resolvable.
            </summary>
            <param name="resolver">The dependency resolver.</param>
            <param name="typeFrom">The type of the requested service.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveOrDefault(Stashbox.IDependencyResolver,System.Type,System.Object,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves a named instance from the container or returns default if the type is not resolvable.
            </summary>
            <param name="resolver">The dependency resolver.</param>
            <param name="typeFrom">The type of the requested service.</param>
            <param name="name">The name of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveAll``1(Stashbox.IDependencyResolver)">
            <summary>
            Resolves all registered implementations of a service.
            </summary>
            <typeparam name="TKey">The type of the requested service.</typeparam>
            <param name="resolver">The dependency resolver.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveAll``1(Stashbox.IDependencyResolver,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves all registered implementations of a service.
            </summary>
            <typeparam name="TKey">The type of the requested service.</typeparam>
            <param name="resolver">The dependency resolver.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveAll``1(Stashbox.IDependencyResolver,System.Object,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves all registered implementations of a service identified by a name.
            </summary>
            <typeparam name="TKey">The type of the requested service.</typeparam>
            <param name="resolver">The dependency resolver.</param>
            <param name="name">The name of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveAll``1(Stashbox.IDependencyResolver,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves all registered implementations of a service with dependency overrides.
            </summary>
            <typeparam name="TKey">The type of the requested service.</typeparam>
            <param name="resolver">The dependency resolver.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested services.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveAll``1(Stashbox.IDependencyResolver,System.Object,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves all registered implementations of a service identified by a name and with dependency overrides.
            </summary>
            <typeparam name="TKey">The type of the requested services.</typeparam>
            <param name="resolver">The dependency resolver.</param>
            <param name="name">The name of the requested services.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested services.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveAll(Stashbox.IDependencyResolver,System.Type)">
            <summary>
            Resolves all registered implementations of a service.
            </summary>
            <param name="resolver">The dependency resolver.</param>
            <param name="typeFrom">The type of the requested services.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveAll(Stashbox.IDependencyResolver,System.Type,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves all registered implementations of a service.
            </summary>
            <param name="resolver">The dependency resolver.</param>
            <param name="typeFrom">The type of the requested services.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveAll(Stashbox.IDependencyResolver,System.Type,System.Object,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves all registered implementations of a service.
            </summary>
            <param name="resolver">The dependency resolver.</param>
            <param name="typeFrom">The type of the requested services.</param>
            <param name="name">The name of the requested services.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveAll(Stashbox.IDependencyResolver,System.Type,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves all registered implementations of a service with dependency overrides.
            </summary>
            <param name="resolver">The dependency resolver.</param>
            <param name="typeFrom">The type of the requested services.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested services.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.ResolveAll(Stashbox.IDependencyResolver,System.Type,System.Object,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves all registered implementations of a service with dependency overrides.
            </summary>
            <param name="resolver">The dependency resolver.</param>
            <param name="typeFrom">The type of the requested services.</param>
            <param name="name">The name of the requested services.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested services.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.Activate``1(Stashbox.IDependencyResolver,System.Object[])">
            <summary>
            On the fly activates an object without registering it into the container. If you want to resolve a
            registered service use the <see cref="M:Stashbox.IDependencyResolver.Resolve(System.Type)" /> instead.
            </summary>
            <typeparam name="TTo">The service type.</typeparam>
            <param name="resolver">The dependency resolver.</param>
            <param name="arguments">Optional dependency overrides.</param>
            <returns>The built object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.Activate(Stashbox.IDependencyResolver,System.Type,System.Object[])">
            <summary>
            Activates an object without registering it into the container. If you want to resolve a
            registered service use the <see cref="M:Stashbox.IDependencyResolver.Resolve(System.Type)" /> method instead.
            </summary>
            <param name="resolver">The dependency resolver.</param>
            <param name="type">The type to activate.</param>
            <param name="arguments">Optional dependency overrides.</param>
            <returns>The built object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.Activate``1(Stashbox.IDependencyResolver,Stashbox.Resolution.ResolutionBehavior,System.Object[])">
            <summary>
            On the fly activates an object without registering it into the container. If you want to resolve a
            registered service use the <see cref="M:Stashbox.IDependencyResolver.Resolve(System.Type)" /> instead.
            </summary>
            <typeparam name="TTo">The service type.</typeparam>
            <param name="resolver">The dependency resolver.</param>
            <param name="arguments">Optional dependency overrides.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The built object.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.PutInstanceInScope``1(Stashbox.IDependencyResolver,``0,System.Boolean,System.Object)">
            <summary>
            Puts an instance into the scope which will be dropped when the scope is being disposed.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <param name="resolver">The resolver.</param>
            <param name="instance">The instance.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from the disposal tracking.</param>
            <param name="name">The identifier.</param>
            <returns>The scope.</returns>
        </member>
        <member name="M:Stashbox.DependencyResolverExtensions.CanResolve``1(Stashbox.IDependencyResolver,System.Object,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Checks whether a type can be resolved by the container, or not.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <param name="resolver">The resolver.</param>
            <param name="name">The registration name.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>True if the service can be resolved, otherwise false.</returns>
        </member>
        <member name="T:Stashbox.StashboxContainer">
            <summary>
            Represents the Stashbox dependency injection container.
            </summary>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterTypesAs(System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Func{System.Type,System.Boolean},System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers a collection of types mapped to a service type.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="types">Types to register.</param>
            <param name="selector">The type selector. Used to filter which types should be excluded/included in the registration process.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterTypes(System.Collections.Generic.IEnumerable{System.Type},System.Func{System.Type,System.Boolean},System.Func{System.Type,System.Type,System.Boolean},System.Boolean,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers a collection of types into the container.
            </summary>
            <param name="types">Types to register.</param>
            <param name="selector">The type selector. Used to filter which types should be excluded/included in the registration process.</param>
            <param name="serviceTypeSelector">The service type selector. Used to filter which interface or base types the implementation should be mapped to.</param>
            <param name="registerSelf">If it's true, the types will be registered to their own type too.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.ComposeBy(System.Type,System.Object[])">
            <summary>
            Composes services by calling the <see cref="M:Stashbox.ICompositionRoot.Compose(Stashbox.IStashboxContainer)" /> method of the given root.
            </summary>
            <param name="compositionRootType">The type of an <see cref="T:Stashbox.ICompositionRoot" /> implementation.</param>
            <param name="compositionRootArguments">Optional composition root constructor arguments.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.ComposeBy(Stashbox.ICompositionRoot)">
            <summary>
            Composes services by calling the <see cref="M:Stashbox.ICompositionRoot.Compose(Stashbox.IStashboxContainer)" /> method of the given root.
            </summary>
            <param name="compositionRoot">The composition root instance.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.#ctor(System.Action{Stashbox.Configuration.ContainerConfigurator})">
            <summary>
            Constructs a <see cref="T:Stashbox.StashboxContainer" />.
            </summary>
        </member>
        <member name="P:Stashbox.StashboxContainer.ContainerContext">
            <summary>
            The container context.
            </summary>
        </member>
        <member name="P:Stashbox.StashboxContainer.ChildContainers">
            <summary>
            Child containers created by this container.
            </summary>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterResolver(Stashbox.Resolution.IResolver)">
            <summary>
            Registers an <see cref="T:Stashbox.Resolution.IResolver" />.
            </summary>
            <param name="resolver">The resolver implementation.</param>
        </member>
        <member name="M:Stashbox.StashboxContainer.IsRegistered``1(System.Object)">
            <summary>
            Checks whether a type is registered in the container.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <param name="name">The registration name.</param>
            <returns>True if the service is registered, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.IsRegistered(System.Type,System.Object)">
            <summary>
            Checks whether a type is registered in the container.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="name">The registration name.</param>
            <returns>True if the service is registered, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.Validate">
            <summary>
            Validates the current state of the container.
            </summary>
        </member>
        <member name="M:Stashbox.StashboxContainer.CreateChildContainer(System.Action{Stashbox.Configuration.ContainerConfigurator},System.Boolean)">
            <summary>
            Creates a child container.
            </summary>
            <param name="config">The action delegate which will configure the child container.</param>
            <param name="attachToParent">If true, the new child container will be attached to the lifecycle of its parent. When the parent is being disposed, the child will be disposed with it.</param>
        </member>
        <member name="M:Stashbox.StashboxContainer.CreateChildContainer(System.Object,System.Action{Stashbox.IStashboxContainer},System.Boolean)">
            <summary>
            Creates a child container.
            </summary>
            <param name="identifier">The identifier of the child container.</param>
            <param name="config">The action delegate which will configure the child container.</param>
            <param name="attachToParent">If true, the new child container will be attached to the lifecycle of its parent. When the parent is being disposed, the child will be disposed with it.</param>
        </member>
        <member name="M:Stashbox.StashboxContainer.GetChildContainer(System.Object)">
            <summary>
            Returns the child container identified by <paramref name="identifier" />.
            </summary>
            <param name="identifier">The identifier of the child container.</param>
            <returns>The child container if it's exist, otherwise null.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.Configure(System.Action{Stashbox.Configuration.ContainerConfigurator})">
            <summary>
            Configures the container.
            </summary>
            <param name="config">The action delegate which will configure the container.</param>
        </member>
        <member name="M:Stashbox.StashboxContainer.GetRegistrationMappings">
            <summary>
            Returns all registration mappings.
            </summary>
            <returns>The registration mappings.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.GetRegistrationDiagnostics">
            <summary>
            Returns the details about the registrations.
            </summary>
            <returns>The detailed string representation of the registration.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.Dispose" />
        <member name="M:Stashbox.StashboxContainer.RegisterFunc``1(System.Func{Stashbox.IDependencyResolver,``0},System.Object)">
            <summary>
            Registers a service with a factory resolver.
            </summary>
            <typeparam name="TService">The service type.</typeparam>
            <param name="factory">The factory delegate.</param>
            <param name="name">The name of the factory registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterFunc``2(System.Func{``0,Stashbox.IDependencyResolver,``1},System.Object)">
            <summary>
            Registers a service with a factory resolver.
            </summary>
            <typeparam name="T1">The first parameter of the factory.</typeparam>
            <typeparam name="TService">The service type.</typeparam>
            <param name="factory">The factory delegate.</param>
            <param name="name">The name of the factory registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterFunc``3(System.Func{``0,``1,Stashbox.IDependencyResolver,``2},System.Object)">
            <summary>
            Registers a service with a factory resolver.
            </summary>
            <typeparam name="T1">The first parameter of the factory.</typeparam>
            <typeparam name="T2">The second parameter of the factory.</typeparam>
            <typeparam name="TService">The service type.</typeparam>
            <param name="factory">The factory delegate.</param>
            <param name="name">The name of the factory registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterFunc``4(System.Func{``0,``1,``2,Stashbox.IDependencyResolver,``3},System.Object)">
            <summary>
            Registers a service with a factory resolver.
            </summary>
            <typeparam name="T1">The first parameter of the factory.</typeparam>
            <typeparam name="T2">The second parameter of the factory.</typeparam>
            <typeparam name="T3">The third parameter of the factory.</typeparam>
            <typeparam name="TService">The service type.</typeparam>
            <param name="factory">The factory delegate.</param>
            <param name="name">The name of the factory registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterFunc``5(System.Func{``0,``1,``2,``3,Stashbox.IDependencyResolver,``4},System.Object)">
            <summary>
            Registers a service with a factory resolver.
            </summary>
            <typeparam name="T1">The first parameter of the factory.</typeparam>
            <typeparam name="T2">The second parameter of the factory.</typeparam>
            <typeparam name="T3">The third parameter of the factory.</typeparam>
            <typeparam name="T4">The fourth parameter of the factory.</typeparam>
            <typeparam name="TService">The service type.</typeparam>
            <param name="factory">The factory delegate.</param>
            <param name="name">The name of the factory registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.Register``2(System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``1}})">
            <summary>
            Registers a service into the container.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <typeparam name="TTo">The implementation type.</typeparam>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.Register``2(System.Object)">
            <summary>
            Registers a service into the container with a name.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.Register``1(System.Type,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``0}})">
            <summary>
            Registers a service into the container.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <param name="typeTo">The implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.Register(System.Type,System.Type,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers a service into the container.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="typeTo">The implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.Register``1(System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``0}})">
            <summary>
            Registers a service into the container.
            </summary>
            <typeparam name="TTo">The service/implementation type.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.Register``1(System.Object)">
            <summary>
            Registers a service into the container.
            </summary>
            <typeparam name="TTo">The service/implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.Register(System.Type,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Registers a service into the container.
            </summary>
            <param name="typeTo">The service/implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterSingleton``2(System.Object)">
            <summary>
            Registers a named service with singleton lifetime.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterSingleton``1(System.Object)">
            <summary>
            Registers a named service with singleton lifetime.
            </summary>
            <typeparam name="TTo">The service/implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterSingleton(System.Type,System.Type,System.Object)">
            <summary>
            Registers a named service with singleton lifetime.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="typeTo">The implementation type.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterScoped``2(System.Object)">
            <summary>
            Registers a named service with scoped lifetime.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterScoped(System.Type,System.Type,System.Object)">
            <summary>
            Registers a named service with scoped lifetime.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="typeTo">The implementation type.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterScoped``1(System.Object)">
            <summary>
            Registers a named service with scoped lifetime.
            </summary>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterInstance``1(``0,System.Object,System.Boolean,System.Action{``0})">
            <summary>
            Registers an already constructed instance into the container.
            </summary>
            <typeparam name="TInstance">The service type.</typeparam>
            <param name="instance">The constructed instance.</param>
            <param name="name">The name of the registration.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from disposal tracking.</param>
            <param name="finalizerDelegate">The cleanup delegate to call before dispose.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterInstance(System.Object,System.Type,System.Object,System.Boolean)">
            <summary>
            Registers an already constructed instance into the container.
            </summary>
            <param name="instance">The constructed instance.</param>
            <param name="serviceType">The service type.</param>
            <param name="name">The name of the registration.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from disposal tracking.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.WireUp``1(``0,System.Object,System.Boolean,System.Action{``0})">
            <summary>
            Registers an already constructed instance, but the container will perform injections and extensions on it.
            </summary>
            <typeparam name="TInstance">The service type.</typeparam>
            <param name="instance">The constructed instance.</param>
            <param name="name">The name of the registration.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from disposal tracking.</param>
            <param name="finalizerDelegate">The cleanup delegate to call before dispose.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.WireUp(System.Object,System.Type,System.Object,System.Boolean)">
            <summary>
            Registers an already constructed instance, but the container will perform injections and extensions on it.
            </summary>
            <param name="instance">The constructed instance.</param>
            <param name="serviceType">The service type.</param>
            <param name="name">The name of the registration.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from disposal tracking.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterDecorator(System.Type,System.Type,System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator})">
            <summary>
            Registers a decorator service into the container.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="typeTo">The implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterDecorator``2(System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator{``0,``1}})">
            <summary>
            Registers a decorator service into the container.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterDecorator(System.Type,System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator})">
            <summary>
            Registers a decorator service into the container. 
            This function configures the registration with the <see cref="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.AsImplementedTypes" /> option.
            </summary>
            <param name="typeTo">The implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterDecorator``1(System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator{``0,``0}})">
            <summary>
            Registers a decorator service into the container. 
            This function configures the registration with the <see cref="M:Stashbox.Registration.Fluent.BaseFluentConfigurator`1.AsImplementedTypes" /> option.
            </summary>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterDecorator``1(System.Type,System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator{``0,``0}})">
            <summary>
            Registers a decorator service into the container.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <param name="typeTo">The implementation type.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.ReMap``2(System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``1}})">
            <summary>
            Replaces an existing registration mapping.
            </summary>
            <typeparam name="TFrom">The service type to re-map.</typeparam>
            <typeparam name="TTo">The implementation type to re-map.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.ReMap``1(System.Type,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``0}})">
            <summary>
            Replaces an existing registration mapping.
            </summary>
            <typeparam name="TFrom">The service type to re-map.</typeparam>
            <param name="typeTo">The implementation type to re-map.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.ReMap(System.Type,System.Type,System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator})">
            <summary>
            Replaces an existing registration mapping.
            </summary>
            <param name="typeFrom">The service type to re-map.</param>
            <param name="typeTo">The implementation type to re-map.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.ReMap``1(System.Action{Stashbox.Registration.Fluent.RegistrationConfigurator{``0,``0}})">
            <summary>
            Replaces an existing registration mapping.
            </summary>
            <typeparam name="TTo">The service/implementation type to re-map.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.ReMapDecorator(System.Type,System.Type,System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator})">
            <summary>
            Replaces an existing decorator mapping.
            </summary>
            <param name="typeFrom">The service type to re-map.</param>
            <param name="typeTo">The implementation type to re-map.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.ReMapDecorator``2(System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator{``0,``1}})">
            <summary>
            Replaces an existing decorator mapping.
            </summary>
            <typeparam name="TFrom">The service type to re-map.</typeparam>
            <typeparam name="TTo">The implementation type to re-map.</typeparam>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.ReMapDecorator``1(System.Type,System.Action{Stashbox.Registration.Fluent.DecoratorConfigurator{``0,``0}})">
            <summary>
            Replaces an existing decorator mapping.
            </summary>
            <typeparam name="TFrom">The service type to re-map.</typeparam>
            <param name="typeTo">The implementation type to re-map.</param>
            <param name="configurator">The configurator for the registered types.</param>
            <returns>The <see cref="T:Stashbox.IStashboxContainer" /> instance.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.Resolve(System.Type)">
            <summary>
            Resolves an instance from the container.
            </summary>
            <param name="typeFrom">The type of the requested service.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.Resolve(System.Type,System.Object,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves a named instance from the container with dependency overrides.
            </summary>
            <param name="typeFrom">The type of the requested service.</param>
            <param name="name">The name of the requested service.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.ResolveOrDefault(System.Type)">
            <summary>
            Resolves an instance from the container or returns default if the type is not resolvable.
            </summary>
            <param name="typeFrom">The type of the requested service.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.ResolveOrDefault(System.Type,System.Object,System.Object[],Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Resolves an instance from the container with dependency overrides or returns default if the type is not resolvable.
            </summary>
            <param name="typeFrom">The type of the requested service.</param>
            <param name="name">The name of the requested service.</param>
            <param name="dependencyOverrides">A collection of objects which are used to override certain dependencies of the requested service.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.GetService(System.Type)" />
        <member name="M:Stashbox.StashboxContainer.ResolveFactory(System.Type,System.Object,Stashbox.Resolution.ResolutionBehavior,System.Type[])">
            <summary>
            Returns a factory delegate that can be used to activate the service.
            </summary>
            <param name="typeFrom">The type of the requested instances.</param>
            <param name="name">The name of the requested registration.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <param name="parameterTypes">The parameter type.</param>
            <returns>The factory delegate.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.ResolveFactoryOrDefault(System.Type,System.Object,Stashbox.Resolution.ResolutionBehavior,System.Type[])">
            <summary>
            Returns a factory delegate that can be used to activate the service or returns default if the type is not resolvable.
            </summary>
            <param name="typeFrom">The type of the requested instances.</param>
            <param name="name">The name of the requested registration.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <param name="parameterTypes">The parameter type.</param>
            <returns>The factory delegate.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.BuildUp``1(``0,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Builds up an existing instance. This means the container performs member and method injections on it without registering it into the container.
            </summary>
            <typeparam name="TTo">The type of the requested instance.</typeparam>
            <param name="instance">The instance to build up.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>The built object.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.Activate(System.Type,Stashbox.Resolution.ResolutionBehavior,System.Object[])">
            <summary>
            Activates an object without registering it into the container. If you want to resolve a
            registered service use the <see cref="M:Stashbox.IDependencyResolver.Resolve(System.Type)" /> method instead.
            </summary>
            <param name="type">The type to activate.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <param name="arguments">Optional dependency overrides.</param>
            <returns>The built object.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.CanResolve(System.Type,System.Object,Stashbox.Resolution.ResolutionBehavior)">
            <summary>
            Checks whether a type can be resolved by the container, or not.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="name">The registration name.</param>
            <param name="resolutionBehavior">The resolution behavior.</param>
            <returns>True if the service can be resolved, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.InvokeAsyncInitializers(System.Threading.CancellationToken)">
            <summary>
            Calls the registered asynchronous initializers of all resolved objects.
            </summary>
            <param name="token">The cancellation token.</param>
            <returns>The initializer task.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.BeginScope(System.Object,System.Boolean)">
            <summary>
            Creates a new scope.
            </summary>
            <param name="name">The name of the scope.</param>
            <param name="attachToParent">If true, the new scope will be attached to the lifecycle of its parent scope. When the parent is being disposed, the new scope will be disposed with it.</param>
            <returns>The created scope.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.PutInstanceInScope(System.Type,System.Object,System.Boolean,System.Object)">
            <summary>
            Puts an instance into the scope. The instance will be disposed along with the scope disposal.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="instance">The instance.</param>
            <param name="withoutDisposalTracking">If it's set to true the container will exclude the instance from disposal tracking.</param>
            <param name="name">The dependency name of the instance.</param>
            <returns>The scope.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.GetDelegateCacheEntries">
            <summary>
            Returns all cached service resolution delegates.
            </summary>
            <returns>The service resolution delegates.</returns>
        </member>
        <member name="T:Stashbox.Utils.Shield">
            <summary>
            Represents a utility class for input validation.
            </summary>
        </member>
        <member name="M:Stashbox.Utils.Shield.EnsureNotNull``1(``0,System.String)">
            <summary>
            Checks the value of the given object and throws an ArgumentNullException if it == null.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <param name="obj">The object to be checked.</param>
            <param name="parameterName">The name of the parameter to be checked.</param>
        </member>
        <member name="M:Stashbox.Utils.Shield.EnsureNotNull``1(``0,System.String,System.String)">
            <summary>
            Checks the value of the given object and throws an ArgumentNullException with the given message if it == null.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <param name="obj">The object to be checked.</param>
            <param name="parameterName">The name of the parameter to be checked.</param>
            <param name="message">The message to be shown in the exception.</param>
        </member>
        <member name="M:Stashbox.Utils.Shield.EnsureNotNullOrEmpty(System.String,System.String)">
            <summary>
            Checks the value of the given string and throws an ArgumentException if it == null or empty.
            </summary>
            <param name="obj">The string to be checked.</param>
            <param name="parameterName">The name of the parameter to be checked.</param>
        </member>
        <member name="M:Stashbox.Utils.Shield.EnsureGreaterThan(System.Int32,System.Int32)">
            <summary>
            Checks two integers and throws an ArgumentException if the actual is lesser than the reference.
            </summary>
            <param name="actual">The actual value.</param>
            <param name="reference">The reference value.</param>
        </member>
        <member name="M:Stashbox.Utils.Shield.EnsureTrue(System.Boolean,System.String)">
            <summary>
            Checks a bool condition and throws an ArgumentException if it is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:Stashbox.Utils.Shield.EnsureTypeOf``1(System.Object)">
            <summary>
            Checks the type of the given object and throws an ArgumentException if it doesn't matches with the given type parameter.
            </summary>
            <typeparam name="TType">The type parameter.</typeparam>
            <param name="obj">The object to be checked.</param>
        </member>
        <member name="T:System.Linq.Expressions.ExpressionExtensions">
            <summary>
            Holds the <see cref="T:System.Linq.Expressions.Expression" /> extension methods.
            </summary>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CompileDelegate(System.Linq.Expressions.Expression,Stashbox.Resolution.ResolutionContext,Stashbox.Configuration.ContainerConfiguration)">
            <summary>
            Compiles an <see cref="T:System.Linq.Expressions.Expression" /> to a <see cref="T:System.Func`3" /> of <see cref="T:Stashbox.IResolutionScope" />, <see cref="T:Stashbox.Resolution.IRequestContext" />, and <see cref="T:System.Object" />.
            </summary>
            <param name="expression">The expression.</param>
            <param name="resolutionContext">The resolution context.</param>
            <param name="containerConfiguration">The container configuration.</param>
            <returns>The compiled delegate.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CompileDelegate(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Compiles a <see cref="T:System.Linq.Expressions.LambdaExpression" /> to a <see cref="T:System.Delegate" />. For testing purposes.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The delegate.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CompileDynamicDelegate(System.Linq.Expressions.Expression,Stashbox.Resolution.ResolutionContext,Stashbox.Configuration.ContainerConfiguration)">
            <summary>
            Compiles an <see cref="T:System.Linq.Expressions.Expression" /> to a <see cref="T:System.Func`2" /> of <see cref="T:Stashbox.IResolutionScope" />, <see cref="T:Stashbox.Resolution.IRequestContext" />, and <see cref="T:System.Delegate" />.
            </summary>
            <param name="expression">The expression.</param>
            <param name="resolutionContext">The resolution context.</param>
            <param name="containerConfiguration">The container configuration.</param>
            <returns>The compiled delegate.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.AsServiceContext(System.Linq.Expressions.Expression,Stashbox.Registration.ServiceRegistration)">
            <summary>
            Creates a <see cref="T:Stashbox.Resolution.ServiceContext" /> from the given <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
            <param name="expression">The expression to wrap within the context.</param>
            <param name="serviceRegistration">Optional service registration when it's available.</param>
            <returns>The service context.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CompileFunc``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Compiles a lambda expression into a Func delegate.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="expression">The expression</param>
            <returns>The delegate.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CompileFunc``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Compiles a lambda expression into a Func delegate.
            </summary>
            <typeparam name="T1">First parameter type.</typeparam>
            <typeparam name="T">The result type.</typeparam>
            <param name="expression">The expression</param>
            <returns>The delegate.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.AssignTo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Constructs an assigment expression, =&gt; Expression.Assign(left, right)
            </summary>
            <param name="left">The left part.</param>
            <param name="right">The right part.</param>
            <returns>The assignment expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.AssignTo(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
            <summary>
            Constructs an assigment expression, =&gt; Expression.Bind(member, expression)
            </summary>
            <param name="memberInfo">The member info.</param>
            <param name="expression">The right part.</param>
            <returns>The assignment expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.AsConstant(System.Object)">
            <summary>
            Constructs a constant expression from an object, =&gt; Expression.Constant(obj)
            </summary>
            <param name="obj">The object.</param>
            <returns>The constant expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.AsConstant(System.Object,System.Type)">
            <summary>
            Constructs a constant expression from an object and a type, =&gt; Expression.Constant(obj, type)
            </summary>
            <param name="obj">The object.</param>
            <param name="type">The type.</param>
            <returns>The constant expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.AsDefault(System.Type)">
            <summary>
            Constructs a default expression from a type, =&gt; Expression.Default(type)
            </summary>
            <param name="type">The type.</param>
            <returns>The default expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.AsBlock(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.ParameterExpression[])">
            <summary>
            Constructs a block expression from an expression collection and variables, =&gt; Expression.Block(variables, expressions)
            </summary>
            <param name="expressions">The expressions.</param>
            <param name="variables">The variables.</param>
            <returns>The block expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.AsLambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            Constructs a lambda expression from an expression and parameters, =&gt; Expression.Lambda(expression, parameters)
            </summary>
            <param name="expression">The expression.</param>
            <param name="parameters">The parameters.</param>
            <returns>The lambda expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.AsLambda(System.Linq.Expressions.Expression,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Constructs a lambda expression from an expression and parameters, =&gt; Expression.Lambda(expression, parameters)
            </summary>
            <param name="expression">The expression.</param>
            <param name="delegateType">The type of the delegate.</param>
            <param name="parameters">The parameters.</param>
            <returns>The lambda expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.AsLambda(System.Linq.Expressions.Expression,System.Type,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            Constructs a lambda expression from an expression and parameters, =&gt; Expression.Lambda(expression, parameters)
            </summary>
            <param name="expression">The expression.</param>
            <param name="delegateType">The type of the delegate.</param>
            <param name="parameters">The parameters.</param>
            <returns>The lambda expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.AsLambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Constructs a lambda expression from an expression and parameters, =&gt; Expression.Lambda(expression, parameters)
            </summary>
            <param name="expression">The expression.</param>
            <param name="parameters">The parameters.</param>
            <returns>The lambda expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.AsLambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            Constructs a lambda expression from an expression and parameters, =&gt; Expression.Lambda{TDelegate}(expression, parameters)
            </summary>
            <param name="expression">The expression.</param>
            <param name="parameters">The parameters.</param>
            <returns>The lambda expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.AsVariable(System.Type,System.String)">
            <summary>
            Constructs a variable expression from a type, =&gt; Expression.Variable(type, name)
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns>The variable expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.AsParameter(System.Type,System.String)">
            <summary>
            Constructs a parameter expression from a type, =&gt; Expression.Parameter(type, name)
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns>The parameter expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CallStaticMethod(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
            <summary>
            Constructs a static method call expression from a <see cref="T:System.Reflection.MethodInfo" /> and its parameters, =&gt; Expression.Call(methodInfo, parameters)
            </summary>
            <param name="methodInfo">The static method info.</param>
            <param name="parameters">The parameters.</param>
            <returns>The call expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CallStaticMethod(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Constructs a static method call expression from a <see cref="T:System.Reflection.MethodInfo" /> and its parameters, =&gt; Expression.Call(methodInfo, parameters)
            </summary>
            <param name="methodInfo">The static method info.</param>
            <param name="parameters">The parameters.</param>
            <returns>The call expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CallMethod(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
            <summary>
            Constructs a method call expression from a target expression, method info and parameters, =&gt; Expression.Call(target, methodInfo, parameters)
            </summary>
            <param name="target">The target expression.</param>
            <param name="methodInfo">The method info.</param>
            <param name="parameters">The parameters.</param>
            <returns>The call expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CallMethod(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Constructs a method call expression from a target expression, method info and parameters, =&gt; Expression.Call(target, methodInfo, parameters)
            </summary>
            <param name="target">The target expression.</param>
            <param name="methodInfo">The method info.</param>
            <param name="parameters">The parameters.</param>
            <returns>The call expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CallMethod(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
            <summary>
            Constructs a method call expression from a target expression, method info and parameters, =&gt; Expression.Call(target, methodInfo, parameters)
            </summary>
            <param name="target">The target expression.</param>
            <param name="methodInfo">The method info.</param>
            <param name="parameters">The parameters.</param>
            <returns>The call expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CallMethod(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Constructs a method call expression from a target expression, method info and parameters, =&gt; Expression.Call(target, methodInfo, parameters)
            </summary>
            <param name="target">The target expression.</param>
            <param name="methodInfo">The method info.</param>
            <param name="parameters">The parameters.</param>
            <returns>The call expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.ConvertTo(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Constructs a convert expression, =&gt; Expression.Convert(expression, type)
            </summary>
            <param name="expression">The expression.</param>
            <param name="type">The type.</param>
            <returns>The convert expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.InvokeLambda(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression[])">
            <summary>
            Constructs an invocation expression, =&gt; Expression.Invoke(expression, parameters)
            </summary>
            <param name="expression">The expression.</param>
            <param name="parameters">The parameters.</param>
            <returns>The invocation expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.InvokeDelegate(System.Delegate,System.Linq.Expressions.Expression[])">
            <summary>
            Constructs an invocation expression, =&gt; Expression.Invoke(delegate.AsConstant(), parameters)
            </summary>
            <param name="delegate">The delegate to invoke.</param>
            <param name="parameters">The delegate parameters.</param>
            <returns>The invocation expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.InvokeDelegate(System.Delegate,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Constructs an invocation expression, =&gt; Expression.Invoke(delegate.AsConstant(), parameters)
            </summary>
            <param name="delegate">The delegate to invoke.</param>
            <param name="parameters">The delegate parameters.</param>
            <returns>The invocation expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.MakeNew(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Constructs an new expression, =&gt; Expression.New(constructor, arguments)
            </summary>
            <param name="constructor">The constructor info.</param>
            <param name="arguments">The arguments.</param>
            <returns>The new expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.MakeNew(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
            <summary>
            Constructs an new expression, =&gt; Expression.New(constructor, arguments)
            </summary>
            <param name="constructor">The constructor info.</param>
            <param name="arguments">The arguments.</param>
            <returns>The new expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.Member(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <summary>
            Constructs a member access expression, =&gt; Expression.Property(expression, prop) or Expression.Field(expression, field)
            </summary>
            <param name="expression">The target expression.</param>
            <param name="memberInfo">The property or field info.</param>
            <returns>The member access expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.Prop(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
            <summary>
            Constructs a property access expression, =&gt; Expression.Property(expression, prop)
            </summary>
            <param name="expression">The target expression.</param>
            <param name="propertyInfo">The property info.</param>
            <returns>The property access expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.Access(System.Reflection.PropertyInfo,System.Linq.Expressions.Expression)">
            <summary>
            Constructs a property access expression, =&gt; Expression.Property(expression, prop)
            </summary>
            <param name="propertyInfo">The property info.</param>
            <param name="expression">The target expression.</param>
            <returns>The property access expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.InitMembers(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <summary>
            Constructs a member init expression, =&gt; Expression.MemberInit(expression, bindings)
            </summary>
            <param name="expression">The expression.</param>
            <param name="bindings">The member bindings.</param>
            <returns>The member init expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.InitMembers(System.Linq.Expressions.Expression,System.Linq.Expressions.MemberBinding[])">
            <summary>
            Constructs a member init expression, =&gt; Expression.MemberInit(expression, bindings)
            </summary>
            <param name="expression">The expression.</param>
            <param name="bindings">The member bindings.</param>
            <returns>The member init expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.InitNewArray(System.Type,System.Linq.Expressions.Expression[])">
            <summary>
            Constructs a new array expression, =&gt; Expression.NewArrayInit(type, initializerExpressions)
            </summary>
            <param name="type">The type.</param>
            <param name="initializerExpressions">The element initializer expressions.</param>
            <returns>The new array expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.InitNewArray(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Constructs a new array expression, =&gt; Expression.NewArrayInit(type, initializerExpressions)
            </summary>
            <param name="type">The type.</param>
            <param name="initializerExpressions">The element initializer expressions.</param>
            <returns>The new array expression.</returns>
        </member>
    </members>
</doc>